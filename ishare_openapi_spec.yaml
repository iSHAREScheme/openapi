openapi: 3.0.0
info:
  version: '3.0'
  title: iSHARE API specifications
  description: >-
    These are the API specifications of iSHARE Scheme v3.0.

    These specifications describe the standardised identification,
    authentication and authorization mechanisms to be implemented by iSHARE
    participants. Depending on the role your organisation fulfils within the
    iSHARE Scheme, you need to provide an iSHARE API according to the
    specifications below.

    It is essential to understand that this page describes the generic API
    specifications for participants. The endpoints described are not actual
    functioning endpoints. For example, any Service Provider in iSHARE needs to
    implement the API endpoints as described in the Service Provider section,
    but his exact endpoints may vary. The /capabilities endpoint, which is
    required for every participant, displays the actual endpoints exposed under
    iSHARE for participants.
  contact:
    url: http://dev.ishare.eu
    email: support@iSHARE.eu
servers:
  # Added by API Auto Mocking Plugin
  - description: iSHARE test network base domain
    url: https://isharetest.net
tags:
  - name: Participant Registry
    description: Endpoints that form the iSHARE Participant Registry API specification.
  - name: Service Provider
    description: Endpoints that form the Service Provider API specification.
  - name: Identity Provider
    description: Endpoints that form the Identity Provider API specification.
  - name: Authorisation Registry
    description: Endpoints that form the Authorisation Registry API specification.
paths:
  /capabilities:
    get:
      tags:
        - Participant Registry
        - Authorisation Registry
        - Service Provider
        - Identity Provider
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilitiesResponse'
          description: OK
      deprecated: false
      operationId: /capabilities
      summary: Retrieves iSHARE capabilities
      description: >-
        The /capabilities endpoint is required for every participant that
        provides services. The endpoint returns iSHARE capabilities (supported
        versions & optional features) of the iSHARE party. 


        The capabilities endpoint should only return the public endpoints if no
        access token is provided. If an access token is provided, the
        capabilities endpoint will also provide the restricted endpoints. A
        party may also have private endpoints, which are endpoints for their own
        internal organization, also known as endpoints that are implemented, but
        not to share with the others. These endpoints are not within the scope
        of iSHARE and should not be returned to other iSHARE parties.


        Server response is an iSHARE signed JSON Web Token. Please refer to the
        models 'jwt_header' and 'jwt_payload_capabilities_token' which indicate
        what the decoded response will look like.
  /trusted_list:
    get:
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedListResponse'
          description: OK
      deprecated: false
      operationId: /trusted_list
      summary: Retrieves list of trusted certificate authorities
      description: >
        Used to obtain the iSHARE list of trusted certificate authorities
        (currently, eIDAS certificate issuer certificate authorities). 


        Server response is an iSHARE signed JSON Web Token. Please refer to the
        models 'jwt_header' and 'jwt_payload_trusted_list_token' which indicate
        what the decoded response will look like.
  /parties/{party_id}:
    options:
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      parameters:
        - style: simple
          name: party_id
          description: The id of the party for which the allowed HTTP methods must be fetched
          schema:
            type: string
            example: did:ishare:EU.NL.NTRNL-12345678
          in: path
          required: true
      responses:
        '204':
          headers:
            Allow:
              $ref: '#/components/headers/optionsAllowHeader'
          description: List the allowed HTTP methods for this endpoint
    get:
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      parameters:
        - style: simple
          name: party_id
          description: The id of the party whose record must be fetched
          schema:
            type: string
            example: did:ishare:EU.NL.NTRNL-12345678
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartyResponse'
          description: OK
      deprecated: false
      operationId: /parties/{party_id}
      summary: Retrieves one party
      description: >-
        Used to obtain information on an iSHARE participant from the Participant 
        Registry. It returns exact participant matched using its ID.


        Server response is an iSHARE signed JSON Web Token. Please refer to the
        models 'jwt_header' and 'jwt_payload_party_token' which indicate what
        the decoded response will look like.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
        required: true
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      parameters:
        - style: simple
          name: party_id
          description: The id of the party whose record must be updated
          schema:
            type: string
            example: did:ishare:EU.NL.NTRNL-12345678
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartyResponse'
          description: ''
      deprecated: false
      operationId: /party-update
      summary: Update an existing party
      description: >-
        Used to programmatically update a participant. The existing party 
        will be replaced with the provided party, so all values must be 
        provided. Can also be used to update the status of a party.
  /parties:
    options:
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      responses:
        '204':
          headers:
            Allow:
              $ref: '#/components/headers/optionsAllowHeader'
          description: List the allowed HTTP methods for this endpoint
    get:
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      parameters:
        - style: form
          explode: true
          name: active_only
          description: Optional parameter used to search by party's  "Active" status.
          schema:
            type: boolean
            example: true
          in: query
        - style: form
          explode: true
          name: name
          description: >-
            Optional parameter used to search by party's name. Can contain a
            single * as wildcard.
          schema:
            type: string
            example: '*Corporation'
          in: query
        - style: form
          explode: true
          name: eori
          description: >-
            Optional parameter used to search by party's EORI. Can contain
            a single * as wildcard. It searches through the party_id array 
            for matching eori (contained in the party_id array). This parameter
            must be considered deprecated and will be removed in future 
            releases.
          schema:
            type: string
            example: EU.EORI.NL000000001
          in: query
        - style: form
          explode: true
          name: party_id
          description: >-
            Optional parameter used to search by party's ID. Can contain
            a single * as wildcard. It searches through the party_id array 
            for matching party_id.
          schema:
            type: string
            example: did:ishare:EU.NL.NTRNL-12345678
          in: query
        - style: form
          explode: true
          name: certified_only
          description: >-
            Search for parties that play one of the certified roles as defined
            in iSHARE role framework.
          schema:
            type: boolean
            example: true
          in: query
        - style: form
          explode: true
          name: date_time
          description: Search parties with specific adherence date
          schema:
            format: date-time
            type: string
            example: '2023-01-31T00:00:00.000Z'
          in: query
        - style: form
          explode: true
          name: adherenceStatus
          description: >-
            Search for parties with adherence status like "Active",
            "Revoked","Not Active", "Pending"
          schema:
            type: string
            example: Active
          in: query
        - style: form
          explode: true
          name: adherenceStartdate
          description: Search parties with specific adherence start date
          schema:
            format: date-time
            type: string
            example: '2023-01-31T00:00:00.000Z'
          in: query
        - style: form
          explode: true
          name: adherenceEnddate
          description: Search parties with specific adherence end date
          schema:
            format: date-time
            type: string
            example: '2023-01-31T00:00:00.000Z'
          in: query
        - style: form
          explode: true
          name: registrarPartyId
          description: Search parties by their registrar Participant Registry's ID number
          schema:
            type: string
            example: did:ishare:EU.NL.NTRNL-12345678
          in: query
        - style: form
          explode: true
          name: webSiteUrl
          description: Search a party by their website URL
          schema:
            type: string
            example: https://www.example.com
          in: query
        - style: form
          explode: true
          name: companyEmail
          description: Search a party by their email ID
          schema:
            type: string
            example: John.doe@example.com
          in: query
        - style: form
          explode: true
          name: companyPhone
          description: Search a party by their company phone number
          schema:
            format: int32
            type: integer
          in: query
        - style: form
          explode: true
          name: publiclyPublishable
          description: >-
            Search parties whose general company contact information is allowed
            to be published
          schema:
            type: boolean
            example: true
          in: query
        - style: form
          explode: true
          name: tags
          description: >-
            Search parties who match any of the keywords that they have added in
            their participant information under tags. It is a free text field
            and can contain any value
          schema:
            type: string
            example: mobility
          in: query
        - style: form
          explode: true
          name: framework
          description: >-
            Search parties based on which framework they were onboarded with.
            Currently parties can only be registered with "iSHARE" framework
          schema:
            type: string
            example: iSHARE
          in: query
        - style: form
          explode: true
          name: subjectName
          description: >-
            Search parties based on the subject name of their PKI (x509)
            certificates. Usually to find a party who is requesting tokens
          schema:
            type: string
            example: >-
              CN=Test Service Consumer,organizationIdentifier=NTRNL-10000001,O=Test Service Consumer,C=NL
          in: query
        - style: form
          explode: true
          name: role
          description: >-
            Search parties based on their roles as defined in iSHARE role
            framework. Possible roles are ServiceConsumer, ServiceProvider, 
            EntitledParty, AuthorisationRegistry, IdentityProvider, 
            IdentityBroker and IdentityBroker and ParticipantRegistry, 
            iShareSatellite (deprecated, will be removed in future releases, 
            use ParticipantRegistry instead).
          schema:
            type: string
            example: ServiceConsumer
          in: query
        - style: form
          explode: true
          name: loA
          description: >-
            Search parties based on their level of assurance which is registered
            in the participant list. Possible values are Low/Substantial/High
          schema:
            type: string
            example: Substantial
          in: query
        - style: form
          explode: true
          name: compliancyVerified
          description: >-
            Search parties that have their compliance to framework verified or
            not.
          schema:
            type: boolean
            example: true
          in: query
        - style: form
          explode: true
          name: legalAdherence
          description: >-
            Search parties that have signed the appropriate legal agreements and
            that have been verified during or after onboarding. Parties adhering
            to legal agreements are legally obliged to adhere to terms of use of
            data.
          schema:
            type: boolean
            example: true
          in: query
        - style: form
          explode: true
          name: authorizationRegistryID
          description: >-
            Search parties based on their authorisation registry provider. The
            ID of the authorisation registry must be provided in search
            parameter and this must be listed as authorisation registry in the
            participant record
          schema:
            type: string
            example: did:ishare:EU.NL.NTRNL-12345678
          in: query
        - style: form
          explode: true
          name: authorizationRegistryName
          description: >-
            Search parties based on their authorisation registry provider. The
            name of the authorisation registry must be provided in search
            parameter and this must be listed as authorisation registry in the
            participant record
          schema:
            type: string
            example: Askme anything
          in: query
        - style: form
          explode: true
          name: dataSpaceID
          description: >-
            Search parties based on data-spaces they participate in. The ID of
            the data-space must be provided
          schema:
            type: string
            example: EU.DSP.NLLOGISTICS_DLDS
          in: query
        - style: form
          explode: true
          name: dataSpaceTitle
          description: >-
            Search parties based on data-spaces they participate in. The name of
            the data-space must be provided
          schema:
            type: string
            example: Dutch Mobility Dataspace
          in: query
        - style: form
          explode: true
          name: countriesOfOperation
          description: >-
            Search parties by name of country they list as their country of
            operation
          schema:
            type: string
            example: Belgium
          in: query
        - style: form
          explode: true
          name: sectorIndustry
          description: Search parties by name of sector they list as their sector/industry
          schema:
            type: string
            example: Energy
          in: query
        - style: form
          explode: true
          name: page
          description: >-
            The parties API by default uses pagination. Each page size is fixed
            at 10 parties per page. When search results into more then 10
            parties, the page parameter must be added for next pages
          schema:
            format: int32
            type: integer
            example: 2
          in: query
        - style: form
          explode: true
          name: certificate_subject_name
          description: >-
            Search parties based on the subject name of their PKI (x509)
            certificates. Usually to find a party who is requesting tokens
          schema:
            type: string
            example: >-
              CN=Test Service Consumer,organizationIdentifier=NTRNL-10000001,O=Test Service Consumer,C=NL
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartiesResponse'
          description: ''
      deprecated: false
      operationId: /parties
      summary: Lists and searches parties
      description: >-
        Search for participant information from your Participant Registry. Various search
        parameters are supported as shown below. When results are more then 10
        participants, pagination is used in response and each page contains up
        to 10 participants.

        Server response is an iSHARE signed JSON Web Token. Please refer to the
        models 'jwt_header' and 'jwt_payload_party_token' which indicate what
        the decoded response will look like.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
        required: true
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartyResponse'
          description: ''
      deprecated: false
      operationId: /parties-new
      summary: Create new party
      description: >-
        Used to programatically create a participant.
  /versions:
    get:
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsResponse'
          description: OK
      deprecated: false
      operationId: /versions
      summary: Retrieves active and planned versions of iSHARE
      description: >-
        Retrieves active and planned versions of iSHARE. By default returns
        current state. Server response is an iSHARE signed JSON Web Token.
        Please refer to the models 'jwt_header' and 'jwt_payload_versions_token'
        which indicate what the decoded response will look like. 
  /dataspaces:
    get:
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataspacesResponse'
          description: OK
      deprecated: false
      operationId: /dataspaces
      summary: Retrieves list of dataspaces
      description: >-
        Used to obtain a list of dataspaces. 


        Server response is an iSHARE signed JSON Web Token. Please refer to the
        models 'jwt_header' and 'jwt_payload_dataspaces_token' which indicate
        what the decoded response will look like.
  /connect/token:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - grant_type
                - scope
                - client_id
                - client_assertion_type
                - client_assertion
              type: object
              properties:
                grant_type:
                  description: OAuth 2.0 grant type. MUST contain “client_credentials”
                  type: string
                  example: client_credentials
                scope:
                  description: >-
                    OAuth 2.0 scope. MUST contain iSHARE scope value. Other
                    values allow the Service Consumer to get tokens that do not
                    include all rights the Service Consumer has. According to
                    RFC 6749, scopes are case-sensitive.
                  type: string
                  example: iSHARE
                client_id:
                  description: >-
                    Used in iSHARE for all client identification for
                    OAuth/OpenID Connect. MUST contain a valid party identifier
                    of the Service Consumer
                  type: string
                  example: did:ishare:EU.NL.NTRNL-12345678
                client_assertion_type:
                  description: >-
                    Used in iSHARE for all client identification for
                    OAuth/OpenID Connect. MUST contain
                    “urn:ietf:params:oauth:client-assertion-type:jwt-bearer”
                  type: string
                  example: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
                client_assertion:
                  description: >-
                    Used in iSHARE for all client identification for
                    OAuth/OpenID Connect. MUST contain JWT token conform iSHARE
                    specifications, signed by the client.
                  type: string
                  example: >-
                    .eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAxIiwic3ViIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMSIsImF1ZCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDAiLCJpYXQiOjE3NDA2NzUyODYsImV4cCI6MTc0MDY3NTMxNiwianRpIjoiMDg2ODkwNGQ4ZWQ5NGMwMWEwYTRkNmRkNWM2NWNlOWUifQ.gXHi4d3qC_klHuViMj4Mv8jLzpe7Ht-8xyzCKI-X06KYmNNMozAZwO-VIJWdvFknMDXYm23QEyT1BDsF4c0BuNrOUgIxyommma9IP_2q_v9mgDAfjznMmIuBwZSuQte23-t8r68v-QDySAYg95ICMbEJohQVrOJmKeSgZluVfazhVFJ0CG-9TGzjRDJtOTZtdxbxBekYfylXttjL-VJtmMC8R0O1MJ-Pxb1HIZLsw7W7UCiZ1hXVXn1vAFsDYjkszLJcuSCAHVYfDjFTa5ix7ui3P_xCZNXZs369oIwk965Jmna-AXKY39oRN45Zv03M2093b_mFW6AK_y5HuDd46g
        required: true
      tags:
        - Participant Registry
        - Authorisation Registry
        - Service Provider
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectTokenResponse'
          description: OK
      deprecated: false
      operationId: /connect/token
      summary: Obtains access token
      description: >-
        Used to obtain an OAuth access token from a Participant Registry, Authorization
        Registry or Service Provider. The access token must be added 
        under "Authorization" header attribute for secured endpoints. Refer to relevant 
        endpoints on proper usage.
  /ep_creation:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpCreationRequest'
        required: true
      tags:
        - Participant Registry
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpCreationResponse'
          description: ''
      deprecated: false
      operationId: /ep_creation
      summary: Create Entitled Party
      description: >-
        Used to programatically create an Entitled Party or Service Consumer, 
        without providing a certificate.

        Both the request body and the http 200 response body contain a signed
        JSON Web Token. Please refer to the models 'jwt_header', 
        'jwt_payload_ep_creation_request_token' and 
        'jwt_payload_ep_creation_response_token' which indicate what the 
        decoded request and response look like.
  /service:
    get:
      tags:
        - Service Provider
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/delegation_evidence_header'
        - $ref: '#/components/parameters/service_consumer_id_token_sc'
        - $ref: '#/components/parameters/purpose'
        - $ref: '#/components/parameters/service_headers'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service_content'
          description: OK
      operationId: /service
      summary: >-
        Example endpoint for Service Provider (parameters apply to other HTTP
        methods as well)
      description: >-
        This is an example service (business specific) endpoint to show how any
        Service Provider that adheres to iSHARE MUST apply iSHARE conformant
        OAuth to every iSHARE enabled service.

        Request can make use of any HTTP method and can contain any extra
        headers. For convenience this documentation only defines the GET method.
        Parameters are undefined because they vary for each Service Provider due
        to their business specific logic. Note: Additional headers for security,
        statefulnes, application functionality could be added and is out of
        scope of this specification.
  /delegation:
    post:
      requestBody:
        description: >-
          Delegation Mask that defines of which delegation the delegation
          evidence is requested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelegationRequestBody'
        required: true
      tags:
        - Authorisation Registry
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegationResponse'
          description: ''
      operationId: /delegation
      summary: Obtains delegation evidence
      description: >-
        Used to obtain delegation evidence from an Authorization Registry. The
        response is a signed JSON Web Token. Please refer to the models
        ‘jwt_header’ and ‘jwt_payload_delegation_evidence_token’ which indicate what
        the decoded response will look like.
  /connect/userinfo:
    get:
      tags:
        - Identity Provider
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserinfoResponse'
          description: OK
      deprecated: false
      operationId: /connect/userinfo
      summary: Obtaining attributes of a Human Service Consumer
      description: >-
        OpenID Connect endpoint for obtaining attributes of a Human Service
        Consumer conform scope defined in access token.


        Server response is an iSHARE signed JSON Web Token. Please refer to the
        models 'jwt_header' and 'jwt_payload_userinfo_token' which indicate what
        the decoded response will look like.
  /connect/authorize:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - response_type
                - scope
                - client_id
                - request
              type: object
              properties:
                response_type:
                  description: >-
                    OAuth 2.0 Response Type. For iSHARE using the Authorization 
                    Code Flow, with value ‘code’ is REQUIRED. MUST be identical 
                    to the response_type value in the request JWT.
                  type: string
                  example: response_type
                scope:
                  description: >-
                    OAuth 2.0 scope for OpenID Connect 1.0. MUST contain the 
                    ‘openid’ scope value and one or more scopes identifying the 
                    attributes from the Human Service Consumer that are 
                    requested. Supported scopes under iSHARE are described on 
                    the Technical Agreements page, in the Human2Machine 
                    interaction section. MUST be identical to the scope value 
                    in the request JWT. Scope values determine the permissions 
                    to be asked to the user.
                  type: string
                  example: scope
                client_id:
                  description: >-
                    OpenID Connect 1.0 client ID. Used in iSHARE for all client 
                    identification for OAuth/OpenID Connect. MUST contain a 
                    valid iSHARE identifier. MUST be identical to the client_id 
                    value in the request JWT.
                  type: string
                  example: client_id
                request:
                  description: >-
                    OpenID Connect 1.0 signed JWT containing all request 
                    parameters. See also Generic iSHARE JWT specifications for 
                    a.o. basic content and signing requirements. Additionally 
                    JWT MUST be encrypted using JWE as a user can access this 
                    JWT itself and decode the data contained therein.
                  type: string
                  example: request
        required: true
      tags:
        - Identity Provider
      parameters:
        - $ref: '#/components/parameters/content-type_form'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/openid-authorize'
          description: OK
      deprecated: false
      operationId: /authorize
      summary: Redirect human service consumer for authentication
      description: >-
        OpenID Connect endpoint for redirecting Human Service Consumer for 
        authentication by the Identity Provider. Server response is directed  to
        the /service_provider/openid_connect1.0/return endpoint.
  /login:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - username
                - password
              type: object
              properties:
                username:
                  description: >-
                    Human user’s login name. Could be email, mobile phone 
                    number, nickname etc.
                  type: string
                  example: username
                password:
                  description: Human user’s password.
                  example: password
        required: true
      tags:
        - Identity Provider
      parameters:
        - $ref: '#/components/parameters/content-type_form'
      responses:
        '200':
          description: >-
            Login was successful and single page application will be responsible
            for redirection to returnUrl parameter.
        '302':
          description: >-
            Login was successful and back-end application redirects user to
            returnUrl parameter by itself.
      deprecated: false
      operationId: /login
      summary: Allow Conformance Test Tool (CTT) to login
      description: >-
        The /login endpoint is required in order to pass Conformance Test Tool
        (CTT). The endpoint allows user to authenticate himself using username
        and password. After successful authentication if user grants permit to
        requested scopes redirection to Service Provider should happen.
  /return:
    get:
      tags:
        - Service Provider
      operationId: /return
      summary: Receiving the redirect from the Identity Provider
      description: >-
        OpenID Connect 1.0 endpoint for receiving the redirect from the Identity
        Provider or Identity Broker after successful human authentication.
      parameters:
        - name: code
          in: query
          description: >-
            Authorization code which is going to be used to request for an
            access token. The authorization code MUST expire shortly after it is
            issued to mitigate the risk of leaks. A maximum authorization code
            lifetime of 10 minutes is RECOMMENDED. The client MUST NOT use the
            authorization code more than once.
          required: true
          deprecated: false
          schema:
            type: string
        - name: state
          in: query
          description: >-
            OpenID Connect 1.0 opaque value used to maintain state between the
            request and the callback. The Service Provider needs to verify if
            initially sent value towards authorize endpoint is equal to this
            returned value.
          required: true
          deprecated: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            On successful user redirect to the Service Provider, the Service
            Provider needs to verify state parameter and make use of code
            parameter in order to retrieve the access token. There are no
            specific response requirements for this endpoint.
  /delegationPolicy:
    post:
      tags:
        - Authorisation Registry
      security:
        - BearerAuth: []
      description: >-
        The Delegation policy request endpoint is an API endpoint that receives 
        policy creation requests. The POST body accepts a JWT token: the Policy 
        Creation Request Token.
      operationId: /delegationPolicy
      summary: Request creation of a delegation policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelegationPolicyCreationRequest'
        required: true
      responses:
        '200':
          description: >-
            OK: The requested policy is created.
        '401':
          description: >-
            Unauthorized: When Authorization header is either missing, invalid 
            or token has already expired.
        '403':
          description: >-
            Forbidden: This error message is return when a policy creation request 
            could not be processed after rules evaluation. The requested policy 
            does not comply with the rules as set by the Entitled Party.
        '500':
          description: >-
            Server Error: When the Authorization Registry was unable to process 
            the request
components:
  schemas:
    licenseRuleList:
      type: array
      description: Root list of license expressions
      items:
        $ref: '#/components/schemas/licenseRule'
    licenseIdentifier:
      type: string
      description: License identifier
      example: https://licenses.ishare.eu/example
    licenseRule:
      description: A license identifier or a logical group (allOf / anyOf)
      oneOf:
        - $ref: '#/components/schemas/licenseIdentifier'
        - $ref: '#/components/schemas/licenseAllOf'
        - $ref: '#/components/schemas/licenseAnyOf'
    licenseAllOf:
      type: object
      required:
        - allOf
      properties:
        allOf:
          type: array
          items:
            $ref: '#/components/schemas/licenseRule'
          minItems: 1
    licenseAnyOf:
      type: object
      required:
        - anyOf
      properties:
        anyOf:
          type: array
          items:
            $ref: '#/components/schemas/licenseRule'
          minItems: 1
    SchemeRole:
      title: SchemeRole
      type: object
      properties:
        role:
          nullable: true
          description: >-
             Possible roles are ServiceConsumer, ServiceProvider, EntitledParty, 
             AuthorisationRegistry, IdentityProvider, IdentityBroker and 
             IdentityBroker and ParticipantRegistry, iShareSatellite (deprecated, 
             will be removed in future releases, use ParticipantRegistry instead).
          type: string
    Adherence:
      title: Adherence
      description: >-
        Adherence details of a party. Object which contains status and validity
        timestamps of the party.
      required:
        - status
        - start_date
        - end_date
      type: object
      properties:
        status:
          description: >-
            Status of the party. Available values are Active, Pending, NotActive
            and Revoked.
          type: string
          example: Active
        start_date:
          format: date-time
          description: >-
            UTC timestamp which states since when adherence status has
            established.
          type: string
          example: '2023-01-31T00:00:00.000Z'
        end_date:
          format: date-time
          description: >-
            UTC timestamp which states till when adherence status has
            established.
          type: string
          example: '2024-02-01T00:00:00.000Z'
    jwt_header:
      title: jwt_header
      required:
        - alg
        - typ
        - x5c
      type: object
      properties:
        alg:
          description: MUST be "RS256" algorithm
          type: string
          example: RS256
        typ:
          description: Type must be "JWT"
          type: string
          example: JWT
        x5c:
          description: base64 encoded DER certificate chain value
          type: array
          items:
            type: string
    jwt_payload_party_token:
      title: jwt_payload_party_token
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
        - party_info
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: JTI value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        party_info:
          allOf:
            - $ref: '#/components/schemas/Party'
            - {}
    Party:
      title: Party
      required:
        - party_id
        - party_name
        - registrar_id
        - adherence
        - agreements
        - roles
      type: object
      properties:
        party_id:
          description: Array of registered party ids of the party.
          type: array
          items:
            type: string
          example: 
            - "did:ishare:EU.NL.NTRNL-12345678"
            - "did:elsi:LEIXG-724500AZSGBRY55MNS59"
            - "did:web:example.com"
            - "CoC:123456789"
        party_name:
          description: Name of the party.
          type: string
          example: Example Corporation
        capability_url:
          description: Capabilities endpoint of the party.
          pattern: ''
          type: string
          example: https://www.example.com/capabilities
        registrar_id:
          description: >-
            Identifier of the party who registered the participant identified by
            the party_id attribute above
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        adherence:
          allOf:
            - $ref: '#/components/schemas/Adherence'
            - {}
        additional_info:
          allOf:
            - $ref: '#/components/schemas/AdditionalInfo'
            - {}
        agreements:
          description: >-
            Object which contains details about contracts including data space
            contracts that party has agreed and signed to.
          type: array
          items:
            $ref: '#/components/schemas/Agreement'
          example:
            - type: TermsOfUse
              title: TOU
              status: Accepted
              sign_date: '2023-01-31T00:00:00.000Z'
              expiry_date: '2024-01-31T00:00:00.000Z'
              hash_file: 614331b0003219f2d2d123b0cd6105fb
              framework: iSHARE
              dataspace_id: ''
              dataspace_title: ''
              compliancy_verified: 'yes'
            - type: AccessionAgreement
              title: AA
              status: Accepted
              sign_date: '2023-01-31T00:00:00.000Z'
              expiry_date: '2024-01-31T00:00:00.000Z'
              hash_file: f50a036402b3b243910ce572930be9f5
              framework: iSHARE
              dataspace_id: ''
              dataspace_title: ''
              compliancy_verified: 'yes'
        certificates:
          description: >-
            Object which contains the details of the PKI/x509 certificates of
            the party. Either certificates or SPOR must be present.
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
          example:
            - subject_name: >-
                CN=Test Service Consumer,organizationIdentifier=NTRNL-10000001,O=Test Service Consumer,C=NL
              certificate_type: eSEAL
              enabled_from: '2023-01-31T00:00:00.000Z'
              x5c: ''
              x5t#s256: ''
        spor:
          allOf:
            - $ref: '#/components/schemas/Spor'
            - {}
        roles:
          description: >-
            Object which contains details about the iSHARE roles of the party.
            The details include the level of assurance as well as compliance
            status for each role.
          type: array
          items:
            $ref: '#/components/schemas/Role_definition'
          example:
            - role: ServiceConsumer
              start_date: '2023-01-31T00:00:00.000Z'
              end_date: '2024-01-31T00:00:00.000Z'
              loa: High
              compliancy_verified: true
              legal_adherence: true
        auth_registries:
          description: >-
            Object which contains details about the authorisation registers that
            the party uses.
          type: array
          items:
            $ref: '#/components/schemas/auth_registry'
          example:
            - name: iSHARE Test Authorization Registry
              id: did:ishare:EU.NL.NTRNL-12345678
              url: http://ar.isharetest.net/
              dataspace_id: ContaktDS1
              dataspace_name: ContaktDS1
    auth_registry:
      title: auth_registry
      description: >-
        Object which contains details about the authorisation registers that the
        party uses.
      required:
        - name
        - id
        - url
      type: object
      properties:
        name:
          description: The name of the authorisation registry provider
          type: string
          example: iSHARE Test Authorization Registry
        id:
          description: The Id of the authorisation registry provider
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        url:
          description: >-
            The URL pointer specific to the party where authorisations can be
            queried/checked from
          type: string
          example: http://ar.isharetest.net/
        dataspace_id:
          description: >-
            The id of the data space where the party uses this authorisation
            registry provider
          type: string
          example: EU.DSP.NL.TESTDATASPACE
        dataspace_name:
          description: The name of the data space corresponding to the data space id
          type: string
          example: TESTDATASPACE
          readOnly: true
    PartiesInfo:
      title: PartiesInfo
      type: object
      properties:
        count:
          format: int32
          description: Count of parties returned based on search
          type: integer
        data:
          description: Object containing parties information
          type: array
          items:
            $ref: '#/components/schemas/Party'
    CertificateAuthority:
      title: CertificateAuthority
      type: object
      properties:
        subject:
          nullable: true
          description: Certificate authority subject name.
          type: string
        certificate_fingerprint:
          nullable: true
          description: SHA256 fingerprint of the certificate.
          type: string
        validity:
          nullable: true
          description: Validity of the certificate. Available values are valid or invalid.
          type: string
        status:
          nullable: true
          description: >-
            Status of the certificate. Available values are granted, withdrawn,
            supervisionceased and undersupervision.
          type: string
    Version:
      title: Version
      type: object
      properties:
        version_name:
          nullable: true
          description: Version name. Expected format should be {major}.{minor}.{patch}.
          type: string
          example: 3.0.0
        valid_from:
          format: date-time
          description: >-
            Timestamp (ISO 8601)/RFC3339. UTC timestamp which states since when
            version is valid.
          type: string
          example: '2030-07-04T08:00:00Z'
        valid_to:
          nullable: true
          format: date-time
          description: >-
            Timestamp (ISO 8601)/RFC3339. UTC timestamp which states till when
            version is valid.
          type: string
          example: '2050-01-04T08:00:00Z'
        version_status:
          allOf:
            - $ref: '#/components/schemas/VersionStatus'
            - {}
    jwt_payload_trusted_list_token:
      title: jwt_payload_trusted_list_token
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
        - trusted_list
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: JTI value of the JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds specifying until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds specifying when this JWT was issued.
          type: integer
          example: 1504683475
        trusted_list:
          description: Contains collection of trusted certificate authorities.
          type: array
          items:
            $ref: '#/components/schemas/CertificateAuthority'
    jwt_payload_parties_token:
      title: jwt_payload_parties_token
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
        - parties_info
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: jti value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        parties_info:
          allOf:
            - $ref: '#/components/schemas/PartiesInfo'
            - {}
    PartyResponse:
      title: PartyResponse
      type: object
      properties:
        party_token:
          type: string
          format: application/jwt
          example: .eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAwIiwic3ViIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMCIsImF1ZCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiLCJpYXQiOjE3NDA2NzU0NzQsImV4cCI6MTc0MDY3NTUwNCwianRpIjoiMDg2ODkwNGQ4ZWQ5NGMwMWEwYTRkNmRkNWM2NWNlOWUiLCJwYXJ0eV9pbmZvIjp7InBhcnR5X2lkIjpbImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiXSwicGFydHlfbmFtZSI6IlRlc3QgU2VydmljZSBDb25zdW1lciIsImNhcGFiaWxpdHlfdXJsIjoiIiwicmVnaXN0cmFyX2lkIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMCIsImFkaGVyZW5jZSI6eyJzdGF0dXMiOiJBY3RpdmUiLCJzdGFydF9kYXRlIjoiMjAyNS0wMi0xMlQwMDowMDowMC4wMDBaIiwiZW5kX2RhdGUiOiIyMDI2LTAyLTEzVDAwOjAwOjAwLjAwMFoifSwiYWRkaXRpb25hbF9pbmZvIjp7ImRlc2NyaXB0aW9uIjoiIiwibG9nbyI6IiIsIndlYnNpdGUiOiIiLCJjb21wYW55X3Bob25lIjoiIiwiY29tcGFueV9lbWFpbCI6IiIsInB1YmxpY2x5X3B1Ymxpc2hhYmxlIjoiZmFsc2UiLCJjb3VudHJpZXNPZk9wZXJhdGlvbiI6W10sInNlY3RvckluZHVzdHJ5IjpbXSwidGFncyI6IiJ9LCJhZ3JlZW1lbnRzIjpbeyJ0eXBlIjoiVGVybXNPZlVzZSIsInRpdGxlIjoidHUiLCJzdGF0dXMiOiJBY2NlcHRlZCIsInNpZ25fZGF0ZSI6IjIwMjUtMDItMTJUMDA6MDA6MDAuMDAwWiIsImV4cGlyeV9kYXRlIjoiMjAyNi0wMi0xM1QwMDowMDowMC4wMDBaIiwiaGFzaF9maWxlIjoiYWUxZDdkMzBmNWRiOTQ5N2YyMWE3OTg0YThhNmYzNTkiLCJmcmFtZXdvcmsiOiJpU0hBUkUiLCJkYXRhc3BhY2VfaWQiOiIiLCJkYXRhc3BhY2VfdGl0bGUiOiIiLCJjb21wbGlhbmN5X3ZlcmlmaWVkIjoibm8ifSx7InR5cGUiOiJBY2Nlc3Npb25BZ3JlZW1lbnQiLCJ0aXRsZSI6ImFhIiwic3RhdHVzIjoiQWNjZXB0ZWQiLCJzaWduX2RhdGUiOiIyMDI1LTAyLTEyVDAwOjAwOjAwLjAwMFoiLCJleHBpcnlfZGF0ZSI6IjIwMjYtMDItMTNUMDA6MDA6MDAuMDAwWiIsImhhc2hfZmlsZSI6ImFlMWQ3ZDMwZjVkYjk0OTdmMjFhNzk4NGE4YTZmMzU5IiwiZnJhbWV3b3JrIjoiaVNIQVJFIiwiZGF0YXNwYWNlX2lkIjoiIiwiZGF0YXNwYWNlX3RpdGxlIjoiIiwiY29tcGxpYW5jeV92ZXJpZmllZCI6Im5vIn1dLCJjZXJ0aWZpY2F0ZXMiOlt7InN1YmplY3RfbmFtZSI6IkM9TkwsTz1UZXN0IFNlcnZpY2UgQ29uc3VtZXIsQ049VGVzdCBTZXJ2aWNlIENvbnN1bWVyLDIuNS40Ljk3PU5UUk5MLTEwMDAwMDAxIiwiY2VydGlmaWNhdGVfdHlwZSI6ImVTZWFsIiwiZW5hYmxlZF9mcm9tIjoiMjAyNS0wMi0xMlQwMDowMDowMC4wMDBaIiwieDVjIjoiTUlJR2lEQ0NCSENnQXdJQkFnSVVSTUlMK29tZzZ2NXBVNnFGT01GY2VHMVlqREF3RFFZSktvWklodmNOQVFFTEJRQXdYVEVlTUJ3R0ExVUVBd3dWWlVsRVFWTmxVMFZCVEU5SlJGOUpjM05EUVVjME1Sa3dGd1lEVlFSaEV4Qk9WRkpPVEMxcFUwaEJVa1ZVUlZOVU1STXdFUVlEVlFRS0V3cHBVMGhCVWtWVVpYTjBNUXN3Q1FZRFZRUUdFd0pZV0RBZUZ3MHlOREV4TURZeE5EUTFOREZhRncweU56RXhNRFl4TkRRMU5EQmFNR1l4Q3pBSkJnTlZCQVlUQWs1TU1SNHdIQVlEVlFRS0RCVlVaWE4wSUZObGNuWnBZMlVnUTI5dWMzVnRaWEl4SGpBY0JnTlZCQU1NRlZSbGMzUWdVMlZ5ZG1salpTQkRiMjV6ZFcxbGNqRVhNQlVHQTFVRVlRd09UbFJTVGt3dE1UQXdNREF3TURFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURZU0tPdm1CNlV4RWFZT1BUN0FQZ1U0bWF1U2g5dmJQYWNKdE0zYTRjZHpOOEtpcHBqb1dTYmdyNkpiNEZjN3RHdk5rNm52V1pIbEh6QURGZTBhUUlHbDhJRGh1cTFCaFhKVHhIWjRrcncvNkFFYkMvR1JjZ3RKZGNhbmxjM1drTTVyTUVzb0RSZDhnT3ZOVG5MN201MkRJV2IzUlM4YkNpdFZINnFuM2hvV1N3WDlYZWVVNkpyR3Uxa3A2bGZUMTl1MXpKS1p1QmFCMElhNHV6bU0rUVNkMWtVNlBlQ1hRK3RyRWZWVVFrUDhnL3J6WkduU0g4dTdOcWl3d1VmRlNpYVV5cTlQNElwK0swSkJUdEF1UTl4cFE2d1F4dDBpb0ZORmI5aXBtYzN4eGVrb3dNUnlrWnpFZG9ITy95blkzVzRzYlRTbDJlTjRFbWZIelFHUkxKTEFnTUJBQUdqZ2dJMU1JSUNNVEFPQmdOVkhROEJBZjhFQkFNQ0JrQXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU3pHazlDUU9uWWVKMXIvL3drc0JDeE5EendpVEJYQmdnckJnRUZCUWNCQVFSTE1Fa3dSd1lJS3dZQkJRVUhNQUdHTzJoMGRIQnpPaTh2WTJFM0xtbHphR0Z5WlhSbGMzUXVibVYwT2pnME5ESXZaV3BpWTJFdmNIVmliR2xqZDJWaUwzTjBZWFIxY3k5dlkzTndNQkFHQTFVZElBUUpNQWN3QlFZRFZSMGdNQjhHQTFVZEpRUVlNQllHQ0NzR0FRVUZCd01FQmdvckJnRUVBWUkzQ2dNTU1Gc0dDQ3NHQVFVRkJ3RURCRTh3VFRBVEJnWUVBSTVHQVFZd0NRWUhCQUNPUmdFR0FqQTJCZ2dyQmdFRkJRY0JBd3dxVkdocGN5QnBjeUIwWlhOMElHVnpaV0ZzSUdObGNuUnBabWxqWVhSbElHWnZjaUIwWlhOMGFXNW5NQjRHQldlQkRBTUJCQlV3RXhNRFRsUlNFd0pPVEF3SU1UQXdNREF3TURFd2djY0dBMVVkSHdTQnZ6Q0J2RENCdWFDQnRxQ0JzNGFCc0doMGRIQnpPaTh2WTJFM0xtbHphR0Z5WlhSbGMzUXVibVYwT2pnME5ESXZaV3BpWTJFdmNIVmliR2xqZDJWaUwzZGxZbVJwYzNRdlkyVnlkR1JwYzNRL1kyMWtQV055YkNacGMzTjFaWEk5UTA0bE0wUmxTVVJCVTJWVFJVRk1UMGxFWDBsemMwTkJSelFsTWtOdmNtZGhibWw2WVhScGIyNUpaR1Z1ZEdsbWFXVnlKVE5FVGxSU1Rrd3RhVk5JUVZKRlZFVlRWQ1V5UTA4bE0wUnBVMGhCVWtWVVpYTjBKVEpEUXlVelJGaFlNQjBHQTFVZERnUVdCQlJkeVVOUGl3ZTJXcHJ3ellndnlaKzZmQzFvTkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQXNYWnJGRzVhanNGTmdUZmxuYlRmRDZhTC9XME85dXl3UTdWVFR1clpIYm9IVHhESUlMM0dxOVZqL2QwdnBKSmdyZnlzblIvTUJIQzlmWG9uVjlXdXdTS2hvOTFtSHF1VWM3eXRseUZ3b0FONVJPVklSMVJCaFVvc01HMEpnVHc1UGdXOXhYQm9nQVorN0VGRGlNNzBCSlVyK29qcWxaMnlZUzMyNElEQ3BnRmU5eVNYaW56VGc4K2QzakJzUUxFMElYblIvK2ROTnRoSGhBbDFITGZsNndaOVJiUHBaZ3AwQWVDY2RLYm4xSWZVemVQWU1uUnl1RGpSZ25tUVlWWUQzMVFhNjhneDVZczFxYi9mWXdTU3BlRVIwWmYwNlMwZXhQVVlTaHRPd1JsWXFpYTJ6OExnTjRUdXJkd2NEY1Rpam1la0U5Ky9vU1NJVGVoRnJvQTJlSExzcVl0ZThqUWdGQlBFY3kyc3lGdzFWRkRxVGEvR25KSmtvRkNmOGpQbmxuQUhFRkpta2hBWjN4ZVAxRGFnMzBDUCthb0NRVk55a2hPNVo3M1Y2QnBOaGRwZ2FZWDRCL1FSZVBVaHFVb1liSExlZkFseU83U0ZSYWh5Y1crbzY2SzVHdWVwdGd0UTJEcnJqdkN0YUNHOEV0SmN6aWhBakJOME9RWnNRV25VOHZvb0xzcytSbWZnOU1YVFI4azg1Y1lUOVpNZFUvNDZ6bGdBTUlhSml6djhqNGVIYUtnZlJCQjFndzcxb1c5N29XNVFLUXg4NjFVclIxdTBESm1TUVNVd05ZbG9wS1ZSbkh2WEpXVUlyZU9xTGZTU0IvMXVWUWZ2cTBVenNKS2RlT0NLUkxwWFhneEIzdzdTMis1S0ZFVFM3dGNiWjZtSXhabEpsaDBWUlNzPSIsIng1dCNzMjU2IjoiNDY3MDU1MTQ1MTExM2IxOTQyNWY4ZDYzYzNkNmNlNDQ0YjU4ZGU2MDgzMTEwMTc0OGU5ZmI5N2IzZTg3NjZmOCJ9XSwicm9sZXMiOlt7InJvbGUiOiJTZXJ2aWNlQ29uc3VtZXIiLCJzdGFydF9kYXRlIjoiMjAyNS0wMi0xMlQwMDowMDowMC4wMDBaIiwiZW5kX2RhdGUiOiIyMDI2LTAyLTEyVDAwOjAwOjAwLjAwMFoiLCJsb2EiOiIiLCJjb21wbGlhbmN5X3ZlcmlmaWVkIjoibm8iLCJsZWdhbF9hZGhlcmVuY2UiOiJubyJ9XSwiYXV0aF9yZWdpc3RyaWVzIjpbXX19.rTC30F9oU0l4epvdpCnP3IRH6FtYhzRavPKDO1FpKn_n_tu8jIyfHATJo1Dbmyh7VIQbYEsEG_b60nmIScSqvwfTT6CkU3O7sbUI-jk0NhgKIMeC3GUgOGSNQkdUPk2GlNfFYmJpGQlSmhgZGk79ceBeqgrCeuoyadhfPHkxc3KPe_5wyN6ZiTIUy0mclNVBtJn8_10k7c7woTEpjZznj2jz_cHQygQY5maGyuNRwVtu97FkGXwdSFhI1EkGI_1t7G6CiM0xOPvM4irgQQ14YGoKIkWmYs-jg_7zBWxhEUg4ciNJrdyfWqXu-2-TD0qfikMye1Z7Ida-BoB35Qy1TQ
    service_content:
      properties:
        service_content_1:
          type: string
        service_content_n:
          type: string
    AdditionalInfo:
      title: AdditionalInfo
      description: >-
        Object which contains additional general contact information of the
        party.
      required:
        - publicly_publishable
      type: object
      properties:
        description:
          description: A brief description of the party
          type: string
          example: >-
            Example is a corporation providing example services to its customers
            in example regions
        logo:
          description: URL pointing to the endpoint where company logo can be found.
          type: string
          example: https://www.example.com/logo.png
        website:
          description: Website address of the party
          type: string
          example: https://www.example.com/
        company_phone:
          description: General company phone number of the party
          type: string
        company_email:
          description: General company email id of the party
          type: string
          example: John.doe@example.com
        publicly_publishable:
          description: Consent to publicly publish the information contained in this object
          type: boolean
          example: false
        countries_operation:
          description: An array of ISO names of the countries where the party operates
          type: array
          items:
            type: string
          example: []
        sector_industry:
          description: An array of GICS based sectors/industry that party serves in
          type: array
          items:
            type: string
          example: []
        tags:
          description: An free text field containing keywords relevant for party
          type: string
          example: mobility transport_operator
    Certificate:
      title: Certificate
      description: >-
        Object which contains the details of the PKI/x509 certificates of the
        party.
      required:
        - subject_name
        - certificate_type
        - enabled_from
        - x5c
        - x5t#s256
      type: object
      properties:
        subject_name:
          description: >-
            subjectName as encoded in the X.509 certificate which corresponds
            with the party that is being requested from the Participant Registry.
            Used by the Participant Registry to match the certificate identifier.
          type: string
          example: >-
            CN=Test Service Consumer,organizationIdentifier=NTRNL-10000001,O=Test Service Consumer,C=NL
        certificate_type:
          description: type of certificate
          type: string
          example: eSEAL
        enabled_from:
          format: date-time
          description: UTC timestamp which states since when certificate is valid.
          type: string
          example: '2023-01-31T00:00:00.000Z'
        x5c:
          description: >-
            The base64 encoded pem format value of the certificate identified by
            its subject name and fingerprint
          type: string
          example: |-
            MIIFVzCCAz+gAwIBAgINAgPlk28xsBNJiGuiFzANBgkqhkiG9w0BAQwFADBHMQsw
            CQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzEU
            MBIGA1UEAxMLR1RTIFJvb3QgUjEwHhcNMTYwNjIyMDAwMDAwWhcNMzYwNjIyMDAw
            MDAwWjBHMQswCQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZp
            Y2VzIExMQzEUMBIGA1UEAxMLR1RTIFJvb3QgUjEwggIiMA0GCSqGSIb3DQEBAQUA
            A4ICDwAwggIKAoICAQC2EQKLHuOhd5s73L+UPreVp0A8of2C+X0yBoJx9vaMf/vo
            27xqLpeXo4xL+Sv2sfnOhB2x+cWX3u+58qPpvBKJXqeqUqv4IyfLpLGcY9vXmX7w
            Cl7raKb0xlpHDU0QM+NOsROjyBhsS+z8CZDfnWQpJSMHobTSPS5g4M/SCYe7zUjw
            TcLCeoiKu7rPWRnWr4+wB7CeMfGCwcDfLqZtbBkOtdh+JhpFAz2weaSUKK0Pfybl
            qAj+lug8aJRT7oM6iCsVlgmy4HqMLnXWnOunVmSPlk9orj2XwoSPwLxAwAtcvfaH
            szVsrBhQf4TgTM2S0yDpM7xSma8ytSmzJSq0SPly4cpk9+aCEI3oncKKiPo4Zor8
            Y/kB+Xj9e1x3+naH+uzfsQ55lVe0vSbv1gHR6xYKu44LtcXFilWr06zqkUspzBmk
            MiVOKvFlRNACzqrOSbTqn3yDsEB750Orp2yjj32JgfpMpf/VjsPOS+C12LOORc92
            wO1AK/1TD7Cn1TsNsYqiA94xrcx36m97PtbfkSIS5r762DL8EGMUUXLeXdYWk70p
            aDPvOmbsB4om3xPXV2V4J95eSRQAogB/mqghtqmxlbCluQ0WEdrHbEg8QOB+DVrN
            VjzRlwW5y0vtOUucxD/SVRNuJLDWcfr0wbrM7Rv1/oFB2ACYPTrIrnqYNxgFlQID
            AQABo0IwQDAOBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E
            FgQU5K8rJnEaK0gnhS9SZizv8IkTcT4wDQYJKoZIhvcNAQEMBQADggIBAJ+qQibb
            C5u+/x6Wki4+omVKapi6Ist9wTrYggoGxval3sBOh2Z5ofmmWJyq+bXmYOfg6LEe
            QkEzCzc9zolwFcq1JKjPa7XSQCGYzyI0zzvFIoTgxQ6KfF2I5DUkzps+GlQebtuy
            h6f88/qBVRRiClmpIgUxPoLW7ttXNLwzldMXG+gnoot7TiYaelpkttGsN/H9oPM4
            7HLwEXWdyzRSjeZ2axfG34arJ45JK3VmgRAhpuo+9K4l/3wV3s6MJT/KYnAK9y8J
            ZgfIPxz88NtFMN9iiMG1D53Dn0reWVlHxYciNuaCp+0KueIHoI17eko8cdLiA6Ef
            MgfdG+RCzgwARWGAtQsgWSl4vflVy2PFPEz0tv/bal8xa5meLMFrUKTX5hgUvYU/
            Z6tGn6D/Qqc6f1zLXbBwHSs09dR2CQzreExZBfMzQsNhFRAbd03OIozUhfJFfbdT
            6u9AWpQKXCBfTkBdYiJ23//OYb2MI3jSNwLgjt7RETeJ9r/tSQdirpLsQBqvFAnZ
            0E6yove+7u7Y/9waLd64NnHi/Hm3lCXRSHNboTXns5lndcEZOitHTtNCjv0xyBZm
            2tIMPNuzjsmhDYAPexZ3FL//2wmUspO8IFgV6dtxQ/PeEMMA3KgqlbbC1j+Qa3bb
            bP6MvPJwNQzcmRk13NfIRmPVNnGuV/u3gm3c
        x5t#s256:
          description: The SHA256 fingerprint of the certificate
          type: string
          example: 4E4FD2B1D7D5DF3858CDAA80DE02AD4E0C530939BB65C57E18CEADA431C6872C
    jwt_payload_versions_token:
      title: jwt_payload_versions_token
      description: >-
        It contains iSHARE compliant JWT claims. In addition to that it also
        contains the following parameters
      required:
        - iss
        - sub
        - jti
        - exp
        - iat
        - versions_info
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: JTI value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        versions_info:
          allOf:
            - $ref: '#/components/schemas/Version'
            - {}
    jwt_payload_capabilities_token:
      title: jwt_payload_capabilities_token
      required:
        - iss
        - sub
        - jti
        - exp
        - iat
        - capabilities_info
      type: object
      properties:
        iss:
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          type: integer
          example: 1504683475
        iat:
          format: int32
          type: integer
          example: 1504683475
        capabilities_info:
          allOf:
            - $ref: '#/components/schemas/CapabilitiesInfo'
            - {}
    Agreement:
      title: Agreement
      description: >-
        Object which contains details about contracts including data space
        contracts that party has agreed and signed to.
      required:
        - type
        - title
        - status
        - sign_date
        - expiry_date
        - framework
        - compliancy_verified
      type: object
      properties:
        type:
          description: >-
            Type of agreement. Refers to the official type of agreement. For
            iSHARE following types are available Terms of Use, Accession
            Agreement, Certified Party Agreement, Participant Registry Agreement 
            (former name Satellite Agreement will be deprecated). 
            Additionally, each data space can define their own type and it can
            be listed here when appropriate dataspace is chosen
          type: string
          example: TermsOfUse
        title:
          description: The name of the agreement or agreement file
          type: string
          example: iSHARE-TOU-party1
        status:
          description: >-
            Status of the agreement. Available values are Draft, Signed,
            Accepted, Obsolete.
          type: string
          example: Accepted
        sign_date:
          format: date-time
          description: Date of signature of the agreement.
          type: string
          example: '2023-01-31T00:00:00.000Z'
        expiry_date:
          format: date-time
          description: >-
            Expiry date of the agreement. For non expiring agreements the end
            date is far in future
          type: string
          example: '2024-01-31T00:00:00.000Z'
        hash_file:
          description: >-
            The calculated hash of the agreement file that has been uploaded.
            Note agreements are not stored in ledger, but only their hash.
          type: string
          example: 614331b0003219f2d2d123b0cd6105fb
        framework:
          description: >-
            The trust framework to which this agreement complies to. Currently,
            only iSHARE is available.
          type: string
          example: iSHARE
        dataspace_id:
          description: >-
            The ID of the data space. If specified, party is onboarded in
            accordance to this data space's terms and conditions
          type: string
          example: EU.DSP.NL.TESTDATASPACE
        dataspace_title:
          description: The name of the selected dataspace
          type: string
          example: Dutch Test Dataspace
          readOnly: true
        compliancy_verified:
          description: >-
            Legal compliance to this agreement has been verified in accordance
            with the process set in trust framework as we as data space
            governance. Possible values are Yes, No, Not Applicable
          type: string
          example: 'Yes'
    Role_definition:
      title: Role_definition
      description: >-
        Object which contains details about the iSHARE roles of the party. The
        details include the level of assurance as well as compliance status for
        each role.
      required:
        - role
        - start_date
        - end_date
        - loa
        - compliancy_verified
        - legal_adherence
      type: object
      properties:
        role:
          description: >-
            Name of the role as defined in iSHARE role framework. Possible roles 
            are ServiceConsumer, ServiceProvider, EntitledParty, 
            AuthorisationRegistry, IdentityProvider, IdentityBroker and 
            IdentityBroker and ParticipantRegistry, iShareSatellite (deprecated, 
            will be removed in future releases, use ParticipantRegistry instead).
          type: string
          example: ServiceConsumer
        start_date:
          format: date-time
          description: >-
            UTC timestamp which states since when this role for the party is
            valid.
          type: string
          example: '2023-01-31T00:00:00.000Z'
        end_date:
          format: date-time
          description: >-
            UTC timestamp which states till when this role for the party is
            valid.
          type: string
          example: '2024-01-31T00:00:00.000Z'
        loa:
          description: >-
            Party's level of assurance. Available values are low, substantial
            and high.
          type: string
          example: High
        compliancy_verified:
          description: Compliance requirements of this role has been met by party
          type: boolean
          example: true
        legal_adherence:
          description: >-
            Legal requirements of this role has been met by party including
            signing of appropriate agreements
          type: boolean
          example: true
    Spor:
      title: Spor
      description: >-
        The signed proof received from recognised issuer (currently eID identity
        providers) of information about the organisation and the authorised
        representative of that organisation being authenticated with "High"
        level of assurance
      required:
        - signed_request
      type: object
      properties:
        signed_request:
          description: >-
            verifiable credentials of the participant signed by a trusted
            authority vouching for its authenticity
          type: string
          example: f1aec63b5b6f545718dc1c86efda3a9e8d8c74c4c2af42b39d9e8d41f3fc2b4e
    CapabilitiesInfo:
      title: CapabilitiesInfo
      type: object
      properties:
        publicServices:
          description: >-
            When no Authorization header is presented when invoking the 
            /capabilities endpoint, only public_services are returned.
            Public_services themselves may (and usually will) require 
            authentication to invoke them.
          type: array
          items:
            $ref: '#/components/schemas/Service'
        restrictedServices:
          description: >-
            When an Authorization header is presented when invoking the
            /capabilities endpoint, in addition to the public services, 
            restricted services may be returned, based on the information 
            provided on the participant by the Authorization  header. This 
            could for example be implemented to expose services only to 
            participants of a dataspaces. restrictedServices themselves may 
            (and usually will) require authentication to invoke them.
          type: array
          items:
            $ref: '#/components/schemas/Service'
    Service:
      title: Service
      type: object
      required:
        - identifier
        - title
        - endpointURL
        - status
        - serviceType
        - version
      properties:
        identifier: 
          description: >-
            Free text identifier of the service. Must be unique within the capabilities 
            definition, a URI is preferred. For iSHARE defined services, it must contain 
            the predefined identifier (defined as operationId in the iSHARE generic 
            OpenAPI specification). For other services, it might for instance refer to an 
            operationId in OpenAPI specifications, or other forms of identifiers in 
            other specification formats. If an iSHARE defined service is being extended, 
            for example for specific purposes in a data space, then the identifier of the
            extended service must be used.
          type: string
          example: /capabilities
        title:
          description: >-
            Free text human readable name of the service.
          type: string
          example: Capabilities
        description:
          description: >-
            Free text description of the service.
          type: string
          example: Retrieves iSHARE capabilities
        descriptionURL: 
          description: >-
            URL that points to the definition of the service. Could be for instance a URL 
            to an OpenAPI description, a WSDL document, a SPARQL Service Description, a 
            DCAT Data Catalog, etc.
          type: string
          example: https://api.swaggerhub.com/apis/iSHARE/iSHARE_Scheme_Specification/2.0
          format: uri
        endpointURL:
          description: >-
            URL of the endpoint, including the correct host. Depending on the 
            setup, this information could also already be included in the 
            description that is provided via the description_url.
          type: string
          example: https://api.example.com/someservice
          format: uri
        tokenEndpoint:
          description: >-
            URL where an access token for the feature can be retrieved. The tokenEndpoint
            is optional, because if for the access token service it is not needed to 
            mention it twice. Also the tokenEndpoint could be omitted for public services
            that do not require authentication/authorisation.
          type: string
          example: https://api.example.com/connect/token
          format: uri
        status:
          description: >-
            Provides information on the status of the service. Must be either
            "deprecated" or "active".
          type: string
          example: active
          x-enum-elements:
            - name: deprecated
            - name: active
        serviceType:
          description: >-
            Can be either "framework-defined", "dataspace-defined" or "self-defined". 
            A framework-defined service is required from a framework perspective 
            (including for instance the /capabilities endpoint), a dataspace-defined 
            service is required from a dataspace perspective and a self-defined 
            service is define by the provider of the service (actual data services 
            are part of this category).
          type: string
          example: active
          x-enum-elements:
            - name: framework-defined
            - name: dataspace-defined
            - name: self-defined
        version:
          title: version
          type: object
          required:
            - capabilityVersion
          properties:
            compliesWithFrameworkVersions:
              description: >-
                Array of framework versions that the service complies with, at a 
                framework level. If not included, the service is assumed to be compliant 
                with the latest version. The versions can be retrieved using the 
                /versions endpoint: https://dev.ishare.eu/satellite/versions.html. 
                Required for framework-defined services.
              type: array
              items:
                type: string
              example: ["2.0.1", "2.1"]
            compliesWithDataspaceVersions:
              description: >-
                Array of dataspace  versions that the service complies with, at a 
                dataspace level.
              type: array
              items:
                type: string
              example: ["1.0", "1.1"]
            capabilityVersion:
              description: >-
                Version of the provided service. The version numbering of services is 
                not related to the version numbering of the framework or of a dataspace.
              type: string
              example: "1.0"
        methods:
          description: >-
            Array of operations supported by the endpoint. It could be HTTP methods 
            when the endpoint is HTTP based, for example: GET, POST, etc.
          type: array
          items:
            type: string
          example: ["GET", "POST"]
    VersionStatus:
      title: VersionStatus
      description: Status of the version. Available values are active and planned.
      enum:
        - inactive
        - active
        - planned
      type: string
      example: planned
      x-enum-elements:
        - name: inactive
          description: ''
        - name: active
          description: ''
        - name: planned
          description: ''
    jwt_payload_ep_creation_request_token:
      title: jwt_payload_ep_creation_request_token
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
        - nbf
        - parties_info
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: JTI value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        nbf:
          format: int32
          description: UNIX timestamp in seconds since when this JWT is valid.
          type: integer
          example: 1504683475
        parties_info:
          allOf:
            - $ref: '#/components/schemas/Party'
            - {}
    jwt_payload_ep_creation_response_token:
      title: jwt_payload_ep_creation_response_token
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
        - nbf
        - parties_info
        - status
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: JTI value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        nbf:
          format: int32
          description: UNIX timestamp in seconds since when this JWT is valid.
          type: integer
          example: 1504683475
        parties_info:
          allOf:
            - $ref: '#/components/schemas/Party'
            - {}
        status:
          description: Status of the request for creation of entitled party
          type: string
          example: success
    TrustedListResponse:
      title: TrustedListResponse
      type: object
      properties:
        trusted_list_token:
          type: string
          format: application/jwt
          example: ".eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUkxOTC0xMDAwMDAwMCIsInN1YiI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTE5MLTEwMDAwMDAwIiwianRpIjoiOTc3NGQ5MjRiOGMwNGI5N2JkM2YwODA3ZGViMTU0YjYiLCJpYXQiOjE1OTE5NjYwMTAsImV4cCI6MTU5MTk2NjA0MCwiYXVkIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJMTkwtMTAwMDAwMDEiLCJ0cnVzdGVkX2xpc3QiOlt7InN1YmplY3QiOiJDPU5MLCBPPVN0YWF0IGRlciBOZWRlcmxhbmRlbiwgQ049VEVTVCBTdGFhdCBkZXIgTmVkZXJsYW5kZW4gT3JnYW5pc2F0aWUgU2VydmljZXMgQ0EgLSBHMyIsImNlcnRpZmljYXRlX2ZpbmdlcnByaW50IjoiREMxM0ZDOTRGRjAxNDlERTFCMDdGNzk2NUY2NTVBRUQ1NEM2QTZCREE3QURGNzFBNzMyRkZDRkFCQzQ1NEM3QSIsInZhbGlkaXR5IjoidmFsaWQiLCJzdGF0dXMiOiJncmFudGVkIn0seyJzdWJqZWN0IjoiQz1OTCwgTz1pU0hBUkUgRm91bmRhdGlvbiwgQ049VEVTVCBpU0hBUkUgRm91bmRhdGlvbiBQS0lvdmVyaGVpZCBPcmdhbmlzYXRpZSBTZXJ2ZXIgQ0EgLSBHMyIsImNlcnRpZmljYXRlX2ZpbmdlcnByaW50IjoiRjIxODEzM0NEM0FDMkQ5NzBEMTBDQTQ2QkIwM0Y4MzI0NTMzMjRCMEY0QUY1QzNGNjFCQUQ2RkRFRUM1RUI4MyIsInZhbGlkaXR5IjoidmFsaWQiLCJzdGF0dXMiOiJncmFudGVkIn0seyJzdWJqZWN0IjoiQz1OTCwgTz1URVNUIFN0YWF0IGRlciBOZWRlcmxhbmRlbiwgQ049VEVTVCBTdGFhdCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEczIiwiY2VydGlmaWNhdGVfZmluZ2VycHJpbnQiOiI5OEM5QzE0RjdGMUY5QTgzQTc0NEUwQUNCQTlEQTZBNDdFRTk2RTA1M0Q3Mjc5NTQ1N0E1QkMwMjA3MjI5RDQzIiwidmFsaWRpdHkiOiJ2YWxpZCIsInN0YXR1cyI6ImdyYW50ZWQifSx7InN1YmplY3QiOiJDTj1URVNUIGlTSEFSRSBGb3VuZGF0aW9uIGVJREFTIiwiY2VydGlmaWNhdGVfZmluZ2VycHJpbnQiOiI4QzM5REQwNkUzNURFODQ2NzAwNEE1NDJEMENBNEI4RkRDN0Q2RjhGNzEzRjQwQTM1QkQ5RTY1OTM4QTE5MUNGIiwidmFsaWRpdHkiOiJ2YWxpZCIsInN0YXR1cyI6ImdyYW50ZWQifSx7InN1YmplY3QiOiJDPU5MLCBPPWlTSEFSRSwgT1U9VGVzdCwgQ049aVNIQVJFVGVzdENBIiwiY2VydGlmaWNhdGVfZmluZ2VycHJpbnQiOiJBNzhGREY3QkExM0JCRDk1QzYyMzY5NzJERDAwM0ZBRTA3RjRFNDQ3Qjc5MUI2RUY2NzM3QUQyMkYwQjYxODYyIiwidmFsaWRpdHkiOiJ2YWxpZCIsInN0YXR1cyI6ImdyYW50ZWQifSx7InN1YmplY3QiOiJDTj1URVNUIGlTSEFSRSBFVSBJc3N1aW5nIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IEc1IiwiY2VydGlmaWNhdGVfZmluZ2VycHJpbnQiOiJGRDU1OTNEQzg3NEVDQzExMzNDMjFBNzcyNTlDMzU5MjU1MkVDMEM4OURGQ0Q3QUIzQzBCRENGRDczRjBGNUNDIiwidmFsaWRpdHkiOiJ2YWxpZCIsInN0YXR1cyI6ImdyYW50ZWQifSx7InN1YmplY3QiOiJDPU5MLCBPPWlTSEFSRSwgT1U9VGVzdCwgQ049aVNIQVJFVGVzdENBX1RMUyIsImNlcnRpZmljYXRlX2ZpbmdlcnByaW50IjoiREYyRkY1MUQxQjI1NTlENjg2NzIzQzk3MDM3REM5RDVDNTg5NDA2Q0FDNEY4NEMyOUFCM0Q0M0UwMTI2MjUxRCIsInZhbGlkaXR5IjoidmFsaWQiLCJzdGF0dXMiOiJncmFudGVkIn1dfQ.q3tAgMHevAAqOQkTzuVf8LRq9zmMP6TleAEw5o4AC6cSRJST2DI47FcOBRw1mTmYtD91yn4E8ho6u9DWqASEOiaJCBKpggyJPJrS0I1_4H9KM2yCdedtsMXmTZW2z7XNBqtlBu7TWqrvmXmnesxB8o6hnEj3442AvvqUo_8NmF9JObddQd_6E0HyhlRhlz4AvuEoHQ9QvccHI6X-jydTX3HGoF5bizu7z45oE1IptvF7vTYafUjERBOQ9bBTz0FfWV27lwQl3W460qmCfU7jz3A3tipgMpPDOp-xKIeBkVFvDWTuRv_qtKBID33qqD2MAfuWP2GpnFtqNkVLhtUjIA"
    VersionsResponse:
      title: VersionsResponse
      type: object
      properties:
        versions_token:
          type: string
          format: application/jwt
          example: ".eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAwIiwic3ViIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMCIsImp0aSI6IjNmYzY2NmFhZWU1YjRiZGNhNDRmN2MyNzgyZTg4MjI5IiwiaWF0IjoxNTkxOTY2MDgxLCJleHAiOjE1OTE5NjYxMTEsImF1ZCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiLCJ2ZXJzaW9uc19pbmZvIjpbeyJ2ZXJzaW9uX25hbWUiOiIzLjAuMCIsInZhbGlkX2Zyb20iOiIyMDMwLTA3LTA0VDA4OjAwOjAwWiIsInZhbGlkX3RvIjoiMjA1MC0wMS0wNFQwODowMDowMFoiLCJ2ZXJzaW9uX3N0YXR1cyI6InBsYW5uZWQifSx7InZlcnNpb25fbmFtZSI6IjIuMC4xIiwidmFsaWRfZnJvbSI6IjIwMTgtMDEtMDFUMDA6MDA6MDBaIiwidmFsaWRfdG8iOiIyMDMxLTAxLTAyVDAwOjAwOjAwWiIsInZlcnNpb25fc3RhdHVzIjoiYWN0aXZlIn0seyJ2ZXJzaW9uX25hbWUiOiIxLjkuMCIsInZhbGlkX2Zyb20iOiIyMDE5LTAxLTA0VDA4OjAwOjAwWiIsInZhbGlkX3RvIjoiMjAzMC0wNy0wNFQwODowMDowMFoiLCJ2ZXJzaW9uX3N0YXR1cyI6ImFjdGl2ZSJ9XX0.ORVuJYw5urQbklOZApPQ9XeKF_CfetlwsPsNB3rimRDxdIbDGhy6sfc3B_pXP4MXDt3PoaZ3TT2oIxDBGHEczBPZYw94j_4h8V4e-lLVhXNm3FtYTT_sRq9uybNYzTwmW56TP_POFfZGA9JVNRH_QkT8B9uDwW6TjpOGhP_egoXaFkrInqE-zJ09yxxyx1F1XvvvXgy9f-xk7yyQoIqoWygxcKyIAdI0riUybQxm0J_qbXw7tl3oFlibMyodeel9Bf9sDpPZryXUv6u2DYlwHKxTjmrAZKnqt1Ai6Lt2pWcUv5KYO187u4wykCh9kGl1HBOXtr2lustaf7fAVxzABQ"
    CapabilitiesResponse:
      title: CapabilitiesResponse
      type: object
      properties:
        capabilities_token:
          type: string
          format: application/jwt
          example: ".eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAwIiwic3ViIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMCIsImF1ZCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiLCJpYXQiOjE3NDA2NzU2NTEsImV4cCI6MTc0MDY3NTY4MSwianRpIjoiMDg2ODkwNGQ4ZWQ5NGMwMWEwYTRkNmRkNWM2NWNlOWUiLCJjYXBhYmlsaXRpZXNfaW5mbyI6eyJwdWJsaWNTZXJ2aWNlcyI6W3siaWRlbnRpZmllciI6InNlcnZpY2UtaWRlbnRpZmllci0xIiwidGl0bGUiOiJTZXJ2aWNlIFRpdGxlIiwiZGVzY3JpcHRpb24iOiJTZXJ2aWNlIERlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb25VUkwiOiJodHRwczovL3VybC50by9kZXNjcmlwdGlvbiIsImVuZHBvaW50VVJMIjoiaHR0cHM6Ly91cmwudG8vZW5kcG9pbnQiLCJ0b2tlbkVuZHBvaW50IjoiaHR0cHM6Ly91cmwudG8vdG9rZW5lbmRwb2ludCIsInN0YXR1cyI6ImFjdGl2ZSIsInNlcnZpY2VUeXBlIjoiZnJhbWV3b3JrLWRlZmluZWQiLCJ2ZXJzaW9uIjp7ImNvbXBsaWVzV2l0aEZyYW1ld29ya1ZlcnNpb25zIjpbIjIuMSJdLCJjb21wbGllc1dpdGhEYXRhc3BhY2VWZXJzaW9ucyI6WyIxLjAiXSwiY2FwYWJpbGl0eVZlcnNpb24iOiIzLjAiLCJtZXRob2RzIjpbIkdFVCIsIlBPU1QiXX19XSwicmVzdHJpY3RlZFNlcnZpY2VzIjpbeyJpZGVudGlmaWVyIjoic2VydmljZS1pZGVudGlmaWVyLTIiLCJ0aXRsZSI6IlNlcnZpY2UgVGl0bGUiLCJkZXNjcmlwdGlvbiI6IlNlcnZpY2UgRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvblVSTCI6Imh0dHBzOi8vdXJsLnRvL2Rlc2NyaXB0aW9uIiwiZW5kcG9pbnRVUkwiOiJodHRwczovL3VybC50by9lbmRwb2ludCIsInRva2VuRW5kcG9pbnQiOiJodHRwczovL3VybC50by90b2tlbmVuZHBvaW50Iiwic3RhdHVzIjoiYWN0aXZlIiwic2VydmljZVR5cGUiOiJkYXRhc3BhY2UtZGVmaW5lZCIsInZlcnNpb24iOnsiY29tcGxpZXNXaXRoRnJhbWV3b3JrVmVyc2lvbnMiOlsiMi4xIl0sImNvbXBsaWVzV2l0aERhdGFzcGFjZVZlcnNpb25zIjpbIjEuMCJdLCJjYXBhYmlsaXR5VmVyc2lvbiI6IjMuMCIsIm1ldGhvZHMiOlsiR0VUIl19fV19fQ.AzinqkIrfkWmEi76rMXnVMwa1HcMSBZK8teNy0zWQUBjN957s1tSyc6UH7SHB20TYtjil1qqdY8g1o2M1MAwZ5w38PPPIorFzYsTzHWIKChWtujd3fJlQwdnrat14UhLzEZ-67bdEDQariJ848zWNyNozSnx3N73LUGZejGSRIddK9asPZrIlvFAVBO7sTGJqP9c8RI-Hg6otBmAr2D64Sl-oTtzqaDKDTvvgsvORP_8UkL5XJwYQnfvgM2EpW2eBqA_eNxmsoNtKTcssQ85MArWjRWWvPz-r4CF8ZmjH5SBms-JupUwdZv8PEdzh7OB670RALCgAzxxEMV3JjZKbw"
    PartiesResponse:
      title: PartiesResponse
      type: object
      properties:
        parties_token:
          type: string
          format: application/jwt
          example: ".eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAwIiwic3ViIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMCIsImF1ZCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiLCJpYXQiOjE3NDA2NzU3MjksImV4cCI6MTc0MDY3NTc1OSwianRpIjoiMDg2ODkwNGQ4ZWQ5NGMwMWEwYTRkNmRkNWM2NWNlOWUiLCJwYXJ0aWVzX2luZm8iOnsiY291bnQiOjEsImRhdGEiOlt7InBhcnR5X2lkIjpbImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiXSwicGFydHlfbmFtZSI6IlRlc3QgU2VydmljZSBDb25zdW1lciIsImNhcGFiaWxpdHlfdXJsIjoiIiwicmVnaXN0cmFyX2lkIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMCIsImFkaGVyZW5jZSI6eyJzdGF0dXMiOiJBY3RpdmUiLCJzdGFydF9kYXRlIjoiMjAyNS0wMi0xMlQwMDowMDowMC4wMDBaIiwiZW5kX2RhdGUiOiIyMDI2LTAyLTEzVDAwOjAwOjAwLjAwMFoifSwiYWRkaXRpb25hbF9pbmZvIjp7ImRlc2NyaXB0aW9uIjoiIiwibG9nbyI6IiIsIndlYnNpdGUiOiIiLCJjb21wYW55X3Bob25lIjoiIiwiY29tcGFueV9lbWFpbCI6IiIsInB1YmxpY2x5X3B1Ymxpc2hhYmxlIjoiZmFsc2UiLCJjb3VudHJpZXNPZk9wZXJhdGlvbiI6W10sInNlY3RvckluZHVzdHJ5IjpbXSwidGFncyI6IiJ9LCJhZ3JlZW1lbnRzIjpbeyJ0eXBlIjoiVGVybXNPZlVzZSIsInRpdGxlIjoidHUiLCJzdGF0dXMiOiJBY2NlcHRlZCIsInNpZ25fZGF0ZSI6IjIwMjUtMDItMTJUMDA6MDA6MDAuMDAwWiIsImV4cGlyeV9kYXRlIjoiMjAyNi0wMi0xM1QwMDowMDowMC4wMDBaIiwiaGFzaF9maWxlIjoiYWUxZDdkMzBmNWRiOTQ5N2YyMWE3OTg0YThhNmYzNTkiLCJmcmFtZXdvcmsiOiJpU0hBUkUiLCJkYXRhc3BhY2VfaWQiOiIiLCJkYXRhc3BhY2VfdGl0bGUiOiIiLCJjb21wbGlhbmN5X3ZlcmlmaWVkIjoibm8ifSx7InR5cGUiOiJBY2Nlc3Npb25BZ3JlZW1lbnQiLCJ0aXRsZSI6ImFhIiwic3RhdHVzIjoiQWNjZXB0ZWQiLCJzaWduX2RhdGUiOiIyMDI1LTAyLTEyVDAwOjAwOjAwLjAwMFoiLCJleHBpcnlfZGF0ZSI6IjIwMjYtMDItMTNUMDA6MDA6MDAuMDAwWiIsImhhc2hfZmlsZSI6ImFlMWQ3ZDMwZjVkYjk0OTdmMjFhNzk4NGE4YTZmMzU5IiwiZnJhbWV3b3JrIjoiaVNIQVJFIiwiZGF0YXNwYWNlX2lkIjoiIiwiZGF0YXNwYWNlX3RpdGxlIjoiIiwiY29tcGxpYW5jeV92ZXJpZmllZCI6Im5vIn1dLCJjZXJ0aWZpY2F0ZXMiOlt7InN1YmplY3RfbmFtZSI6IkM9TkwsTz1UZXN0IFNlcnZpY2UgQ29uc3VtZXIsQ049VGVzdCBTZXJ2aWNlIENvbnN1bWVyLDIuNS40Ljk3PU5UUk5MLTEwMDAwMDAxIiwiY2VydGlmaWNhdGVfdHlwZSI6ImVTZWFsIiwiZW5hYmxlZF9mcm9tIjoiMjAyNS0wMi0xMlQwMDowMDowMC4wMDBaIiwieDVjIjoiTUlJR2lEQ0NCSENnQXdJQkFnSVVSTUlMK29tZzZ2NXBVNnFGT01GY2VHMVlqREF3RFFZSktvWklodmNOQVFFTEJRQXdYVEVlTUJ3R0ExVUVBd3dWWlVsRVFWTmxVMFZCVEU5SlJGOUpjM05EUVVjME1Sa3dGd1lEVlFSaEV4Qk9WRkpPVEMxcFUwaEJVa1ZVUlZOVU1STXdFUVlEVlFRS0V3cHBVMGhCVWtWVVpYTjBNUXN3Q1FZRFZRUUdFd0pZV0RBZUZ3MHlOREV4TURZeE5EUTFOREZhRncweU56RXhNRFl4TkRRMU5EQmFNR1l4Q3pBSkJnTlZCQVlUQWs1TU1SNHdIQVlEVlFRS0RCVlVaWE4wSUZObGNuWnBZMlVnUTI5dWMzVnRaWEl4SGpBY0JnTlZCQU1NRlZSbGMzUWdVMlZ5ZG1salpTQkRiMjV6ZFcxbGNqRVhNQlVHQTFVRVlRd09UbFJTVGt3dE1UQXdNREF3TURFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURZU0tPdm1CNlV4RWFZT1BUN0FQZ1U0bWF1U2g5dmJQYWNKdE0zYTRjZHpOOEtpcHBqb1dTYmdyNkpiNEZjN3RHdk5rNm52V1pIbEh6QURGZTBhUUlHbDhJRGh1cTFCaFhKVHhIWjRrcncvNkFFYkMvR1JjZ3RKZGNhbmxjM1drTTVyTUVzb0RSZDhnT3ZOVG5MN201MkRJV2IzUlM4YkNpdFZINnFuM2hvV1N3WDlYZWVVNkpyR3Uxa3A2bGZUMTl1MXpKS1p1QmFCMElhNHV6bU0rUVNkMWtVNlBlQ1hRK3RyRWZWVVFrUDhnL3J6WkduU0g4dTdOcWl3d1VmRlNpYVV5cTlQNElwK0swSkJUdEF1UTl4cFE2d1F4dDBpb0ZORmI5aXBtYzN4eGVrb3dNUnlrWnpFZG9ITy95blkzVzRzYlRTbDJlTjRFbWZIelFHUkxKTEFnTUJBQUdqZ2dJMU1JSUNNVEFPQmdOVkhROEJBZjhFQkFNQ0JrQXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU3pHazlDUU9uWWVKMXIvL3drc0JDeE5EendpVEJYQmdnckJnRUZCUWNCQVFSTE1Fa3dSd1lJS3dZQkJRVUhNQUdHTzJoMGRIQnpPaTh2WTJFM0xtbHphR0Z5WlhSbGMzUXVibVYwT2pnME5ESXZaV3BpWTJFdmNIVmliR2xqZDJWaUwzTjBZWFIxY3k5dlkzTndNQkFHQTFVZElBUUpNQWN3QlFZRFZSMGdNQjhHQTFVZEpRUVlNQllHQ0NzR0FRVUZCd01FQmdvckJnRUVBWUkzQ2dNTU1Gc0dDQ3NHQVFVRkJ3RURCRTh3VFRBVEJnWUVBSTVHQVFZd0NRWUhCQUNPUmdFR0FqQTJCZ2dyQmdFRkJRY0JBd3dxVkdocGN5QnBjeUIwWlhOMElHVnpaV0ZzSUdObGNuUnBabWxqWVhSbElHWnZjaUIwWlhOMGFXNW5NQjRHQldlQkRBTUJCQlV3RXhNRFRsUlNFd0pPVEF3SU1UQXdNREF3TURFd2djY0dBMVVkSHdTQnZ6Q0J2RENCdWFDQnRxQ0JzNGFCc0doMGRIQnpPaTh2WTJFM0xtbHphR0Z5WlhSbGMzUXVibVYwT2pnME5ESXZaV3BpWTJFdmNIVmliR2xqZDJWaUwzZGxZbVJwYzNRdlkyVnlkR1JwYzNRL1kyMWtQV055YkNacGMzTjFaWEk5UTA0bE0wUmxTVVJCVTJWVFJVRk1UMGxFWDBsemMwTkJSelFsTWtOdmNtZGhibWw2WVhScGIyNUpaR1Z1ZEdsbWFXVnlKVE5FVGxSU1Rrd3RhVk5JUVZKRlZFVlRWQ1V5UTA4bE0wUnBVMGhCVWtWVVpYTjBKVEpEUXlVelJGaFlNQjBHQTFVZERnUVdCQlJkeVVOUGl3ZTJXcHJ3ellndnlaKzZmQzFvTkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQXNYWnJGRzVhanNGTmdUZmxuYlRmRDZhTC9XME85dXl3UTdWVFR1clpIYm9IVHhESUlMM0dxOVZqL2QwdnBKSmdyZnlzblIvTUJIQzlmWG9uVjlXdXdTS2hvOTFtSHF1VWM3eXRseUZ3b0FONVJPVklSMVJCaFVvc01HMEpnVHc1UGdXOXhYQm9nQVorN0VGRGlNNzBCSlVyK29qcWxaMnlZUzMyNElEQ3BnRmU5eVNYaW56VGc4K2QzakJzUUxFMElYblIvK2ROTnRoSGhBbDFITGZsNndaOVJiUHBaZ3AwQWVDY2RLYm4xSWZVemVQWU1uUnl1RGpSZ25tUVlWWUQzMVFhNjhneDVZczFxYi9mWXdTU3BlRVIwWmYwNlMwZXhQVVlTaHRPd1JsWXFpYTJ6OExnTjRUdXJkd2NEY1Rpam1la0U5Ky9vU1NJVGVoRnJvQTJlSExzcVl0ZThqUWdGQlBFY3kyc3lGdzFWRkRxVGEvR25KSmtvRkNmOGpQbmxuQUhFRkpta2hBWjN4ZVAxRGFnMzBDUCthb0NRVk55a2hPNVo3M1Y2QnBOaGRwZ2FZWDRCL1FSZVBVaHFVb1liSExlZkFseU83U0ZSYWh5Y1crbzY2SzVHdWVwdGd0UTJEcnJqdkN0YUNHOEV0SmN6aWhBakJOME9RWnNRV25VOHZvb0xzcytSbWZnOU1YVFI4azg1Y1lUOVpNZFUvNDZ6bGdBTUlhSml6djhqNGVIYUtnZlJCQjFndzcxb1c5N29XNVFLUXg4NjFVclIxdTBESm1TUVNVd05ZbG9wS1ZSbkh2WEpXVUlyZU9xTGZTU0IvMXVWUWZ2cTBVenNKS2RlT0NLUkxwWFhneEIzdzdTMis1S0ZFVFM3dGNiWjZtSXhabEpsaDBWUlNzPSIsIng1dCNzMjU2IjoiNDY3MDU1MTQ1MTExM2IxOTQyNWY4ZDYzYzNkNmNlNDQ0YjU4ZGU2MDgzMTEwMTc0OGU5ZmI5N2IzZTg3NjZmOCJ9XSwicm9sZXMiOlt7InJvbGUiOiJTZXJ2aWNlQ29uc3VtZXIiLCJzdGFydF9kYXRlIjoiMjAyNS0wMi0xMlQwMDowMDowMC4wMDBaIiwiZW5kX2RhdGUiOiIyMDI2LTAyLTEyVDAwOjAwOjAwLjAwMFoiLCJsb2EiOiIiLCJjb21wbGlhbmN5X3ZlcmlmaWVkIjoibm8iLCJsZWdhbF9hZGhlcmVuY2UiOiJubyJ9XSwiYXV0aF9yZWdpc3RyaWVzIjpbXX1dfX0.bGsNsC7bYV6r6NzgheBCKGKS2tRxbTuNd5p97lm1Es0c9FcpIwl2Dd0VGwGP_Ezg2Cfna6_nYNZJZsLLxE9JGO2q4ltjDuCFcGh7tHiDJU0-bKnJjSwZbNoxf2XRIlTiCtPvtVh-s2vJes3XvZUP-ZrZN-uXFS7p_XGhRsX6afyqWtABGPlGJt5G089p7q7MBth_Cc-LdFuGk44Z2O5E8UoqhRSXURhaNvaT2G-D-Onzl-X3lZRYpWveVFrvZAvtH5s4IOamLHX2rlOYMHZb4qjrR-oZ9A1mB4jnAueOxAXw86-oDfLaq_9IPYjKwoXfE7dGG7Pm_dsB0-TfYFH2VA"
    DataspaceInfo:
      title: DataspaceInfo
      type: object
      properties:
        total_count:
          format: int32
          description: Total count of found dataspaces
          type: integer
        page_count:
          format: int32
          description: Number of pages (10 per page)
          type: integer
        count:
          format: int32
          description: Number of dataspaces returned
          type: integer
        data:
          description: Object containing dataspace information
          type: array
          items:
            $ref: '#/components/schemas/Dataspace'
    DataspacesResponse:
      title: DataspacesResponse
      type: object
      properties:
        dataspace_list_token:
          type: string
          format: application/jwt
          example: ".eyJhdWQiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAzIiwiZGF0YXNwYWNlX2luZm8iOnsidG90YWxfY291bnQiOjcsInBhZ2VDb3VudCI6MSwiY291bnQiOjcsImRhdGEiOlt7ImRhdGFzcGFjZV90aXRsZSI6IkRMRFNfTG9naXN0aWNzX0RhdGFTcGFjZSIsImRhdGFzcGFjZV9pZCI6IkVVLkRTLk5MLkRMRFNfTG9naXN0aWNzIiwiZGF0YXNwYWNlZGVmX3VybCI6IiIsImRhdGFzcGFjZV93ZWJzaXRlIjoiIiwidGFncyI6IiIsInN0YXR1cyI6IkFjdGl2ZSIsImNvdW50cnlfcmVnIjoiIE5ldGhlcmxhbmRzIiwiY291bnRyaWVzX29wZXJhdGlvbiI6WyIgTmV0aGVybGFuZHMiXSwic2VjdG9ycyI6W119LHsiZGF0YXNwYWNlX3RpdGxlIjoiVGVzdERTUCIsImRhdGFzcGFjZV9pZCI6IkVVLkRTUC5OTFRFU1REU1AiLCJkYXRhc3BhY2VkZWZfdXJsIjoiIiwiZGF0YXNwYWNlX3dlYnNpdGUiOiIiLCJ0YWdzIjoiIiwic3RhdHVzIjoiSW5Qcm9ncmVzcyIsImNvdW50cnlfcmVnIjoiIiwiY291bnRyaWVzX29wZXJhdGlvbiI6W10sInNlY3RvcnMiOltdfSx7ImRhdGFzcGFjZV90aXRsZSI6IkNvbnRha3REUzEiLCJkYXRhc3BhY2VfaWQiOiJDb250YWt0RFMxIiwiZGF0YXNwYWNlZGVmX3VybCI6IiIsImRhdGFzcGFjZV93ZWJzaXRlIjoid3d3LmNvbnRha3QubmwiLCJ0YWdzIjoiI3Rlc3QiLCJzdGF0dXMiOiJJblByb2dyZXNzIiwiY291bnRyeV9yZWciOiIgTmV0aGVybGFuZHMiLCJjb3VudHJpZXNfb3BlcmF0aW9uIjpbIiBOZXRoZXJsYW5kcyJdLCJzZWN0b3JzIjpbIkluZm9ybWF0aW9uIFRlY2hub2xvZ3kiXX0seyJkYXRhc3BhY2VfdGl0bGUiOiJOTC5BSVJGUkVJR0hUIiwiZGF0YXNwYWNlX2lkIjoiTkwuQUlSRlJFSUdIVCIsImRhdGFzcGFjZWRlZl91cmwiOiIiLCJkYXRhc3BhY2Vfd2Vic2l0ZSI6Imh0dHBzOi8vd3d3LmNhcmdvbmF1dC5ubCIsInRhZ3MiOiIjYWlyICIsInN0YXR1cyI6IkluUHJvZ3Jlc3MiLCJjb3VudHJ5X3JlZyI6IiIsImNvdW50cmllc19vcGVyYXRpb24iOlsiIE5ldGhlcmxhbmRzIl0sInNlY3RvcnMiOlsiSW5mb3JtYXRpb24gVGVjaG5vbG9neSJdfSx7ImRhdGFzcGFjZV90aXRsZSI6IlVuaVNhbGVudG9EUyIsImRhdGFzcGFjZV9pZCI6IkVVLkRTLklUVU5JU0FMRFMiLCJkYXRhc3BhY2VkZWZfdXJsIjoiIiwiZGF0YXNwYWNlX3dlYnNpdGUiOiIiLCJ0YWdzIjoiIiwic3RhdHVzIjoiTmV3IiwiY291bnRyeV9yZWciOiJJdGFseSIsImNvdW50cmllc19vcGVyYXRpb24iOltdLCJzZWN0b3JzIjpbXX0seyJkYXRhc3BhY2VfdGl0bGUiOiJpU0hBUkUgVGVzdCBTcGFjZSIsImRhdGFzcGFjZV9pZCI6IkVVLmlTSEFSRSIsImRhdGFzcGFjZWRlZl91cmwiOiIiLCJkYXRhc3BhY2Vfd2Vic2l0ZSI6IiIsInRhZ3MiOiIiLCJzdGF0dXMiOiJBY3RpdmUiLCJjb3VudHJ5X3JlZyI6IiBOZXRoZXJsYW5kcyIsImNvdW50cmllc19vcGVyYXRpb24iOlsiIE5ldGhlcmxhbmRzIl0sInNlY3RvcnMiOlsiSW5mb3JtYXRpb24gVGVjaG5vbG9neSJdfSx7ImRhdGFzcGFjZV90aXRsZSI6IlRFU1QgRFMiLCJkYXRhc3BhY2VfaWQiOiJFVS5URVNULkVVLjEwMDEiLCJkYXRhc3BhY2VkZWZfdXJsIjoiIiwiZGF0YXNwYWNlX3dlYnNpdGUiOiIiLCJ0YWdzIjoiIiwic3RhdHVzIjoiTmV3IiwiY291bnRyeV9yZWciOiIiLCJjb3VudHJpZXNfb3BlcmF0aW9uIjpbXSwic2VjdG9ycyI6W119XX0sImV4cCI6MTY5MTA3ODk2MywiaWF0IjoxNjkxMDc4OTMzLCJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAwIiwianRpIjoiZGMzMjkwNzI2ZjhhNDMyYzhjMjQ4ZWJkMjAzZTdhNDEiLCJuYmYiOjE2OTEwNzg5MzMsInN1YiI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDAifQ.G-jawwbvewLHmLmjjK7muA2sd7dmuxz6fd80SiVsyR5oh7GcgNa10oPowNpawRe-DXcNYTZZNF-cJRUpVrCwhJ6Ei1YwEcS66bPEagOFozuacfH6AA7fH_woX5Nzf9v4S5YF1Ld92we2AhQ9gejeZ50OO3OIALvp3NRcnYRmj64Yaf4HSpvv2zPBRIoqj6l1uEEM4kajg2JPsgfjNnAEoS5D7MhBAmpp-KMYKWJtE57451Q8iEMIqFKH6F8ThyIw5bemOwTIbC3AjNpXRfZuj3kIZe366lTAuHACDR3aNsftToGLX5tRPDTEZyosElfs1GUNNd31tehwSyMz5E89TQ"
    jwt_payload_dataspace_list_token:
      title: jwt_payload_dataspace_list_token
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
        - dataspaces_info
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: jti value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        dataspace_info:
          allOf:
            - $ref: '#/components/schemas/DataspaceInfo'
    Dataspace:
      title: Dataspace
      type: object
      properties:
        dataspace_id:
          description: >-
            Unique ID of the dataspace. This is in format of <Continent>.<DS>.<3
            letter code for dataspaces>.<Country>.<dataspace name> for example
            EU.DS.GND.NL.DVU. Where, continent is 2 letter code, followed by
            “DS” (stands for dataspace), followed by 3 letter code of common eu
            dataspaces HLT - Health, INM - Industrial and Manufacturing, AGR -
            Agriculture, FIN - Finance, MOB - Mobility, GND - Green Deal, ENR -
            Energy, PUB - Public Administration, SKL - Skills, followed by ISO
            3166-1 alpha-2 2 letter Country code and lastly the name/title of
            the dataspace. Name may not contain spaces or dot “.” or other
            special characters. Maximum length of name can be 15 characters.
          type: string
          example: EU.DS.NL.DLDS_Logistics
        dataspace_title:
          description: Title of dataspace.
          type: string
          example: DLDS_Logistics_DataSpace
        dataSpaceSelfDescriptionUrl:
          description: >-
            URL pointing to the dataspace self description (structured JSON 
            file containing a description of the dataspace).
          type: string
          example: https://www.example.com/definition
        dataspace_website:
          description: >-
            Website address of the dataspace, typically dataspace authority. The
            website details out more information about the datasapce and guides
            (potential) participants (to become member of) the dataspace.
          type: string
          example: https://www.example.com
        tags:
          description: >-
            Free text field for addting relevant tags that are relevant in the
            context of datasapce. It useful for searching for specific
            dataspaces based on tags.
          type: string
          example: '#logistics #NL'
        status:
          description: >-
            Status of the dataspace. Available values are new, in progress,
            active and not active.
          type: string
          example: active
        country_reg:
          description: Country in which the dataspace is registered in.
          type: string
          example: The Netherlands
        countries_operation:
          description: Array of country names in which the dataspace operates.
          type: array
          items:
            type: string
          example:
            - The Netherlands
            - Germany
        sectors:
          description: Array of sector names in which the dataspace operates.
          type: array
          items:
            type: string
          example:
            - Information Technology
            - Logistics
    ConnectTokenResponse:
      title: ConnectTokenResponse
      type: object
      properties:
        access_token:
          type: string
          example:
            - .eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDAwIiwic3ViIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMCIsImF1ZCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiLCJpYXQiOjE3NDA2NzU4MjcsImV4cCI6MTc0MDY3NTg1NywianRpIjoiMDg2ODkwNGQ4ZWQ5NGMwMWEwYTRkNmRkNWM2NWNlOWUifQ.mXgFY1dTcYuEM_ubRyvb9Z73x7PoZCTXPLq_0D9D-lyJh-Lwx9X0ze11r9eIbuNRvr1RleY3LbKSkkf5oEdH1HVDzqeo7y9dZpGhqPiMOLMVN4aPUmPAoLUnb-rGe9hahwBlZcO1eNNb_JCpE6vO6me_vaX5II3Kq1oPTfUZ9CZS4EGGNSHnTWJSScp3HcYw8u67g4eGxONWRKOZktfwK4F-1jrmU5jse0bwGSSqUsVJ1MLzhdFs9zqKcMQaY7uhsBqJEOlnzLzyg7_lRoceLR8kqi7ABSSlVMze8-7J-G5HulmyqTOtfc2QnReHAU-GhhPNQEfbQrixNoSZZM56SQ
        token_type:
          type: string
          example:
            - Bearer
        expires_in:
          type: number
          example:
            - 3600
    DelegationPolicyCreationRequest:
      title: DelegationPolicyCreationRequest
      required:
        - delegationPolicyRequestToken
      type: object
      properties:
        delegationPolicyRequestToken:
          type: string
          format: application/jwt
    EpCreationRequest:
      title: ep_creation_request
      required:
        - ep_creation_token
      type: object
      properties:
        ep_creation_token:
          type: string
          format: application/jwt
    EpCreationResponse:
      title: ep_creation_response
      required:
        - ep_creation_token
      type: object
      properties:
        ep_creation_token:
          type: string
          format: application/jwt
          example: "..ZVezpuBxt6wKbBn8HjoU70vpcpjM35hw_-stF_rVRm1Gvigt-1-Qwu1AUZKLZDNfFeI6FdBK_HNFnEQGPGgCryG_5oNgP0g9ioVvjZZmzjSfwD6N9aXhpElgaR7SWu4nlO-7W3AjnpqQf4hsDpBOGAvFk4C_uEC8rc-WYIX-ahCOZmz9wT0CHAeN7ZAXW8CXTqh-111F46wz1RUC4IMgWP1x8IbfQ91W9nxd6tV6Ih_LUvgvmZaQF42qeW59Fiit6fPKNPZyPEyTDLRnJ8swfDikOJk_H3n6eMMMUyD90MeUNd6zCMqELUeEcG__XQ6raj4hMmcmUaxMH25Q8PNSGg"
    DelegationRequestBody:
      description: >-
        The model used for request body in /delegation endpoint, for obtaining
        delegation evidence.
      required:
        - delegationRequest
        - policyIssuer
        - target
        - policySets
      type: object
      properties:
        delegationRequest:
          required:
            - policyIssuer
            - target
            - policySets
          type: object
          properties:
            policyIssuer:
              type: string
            target:
              required:
                - accessSubject
              type: object
              properties:
                accessSubject:
                  type: string
            policySets:
              type: array
              items:
                $ref: '#/components/schemas/PolicySet_evidence_request'
            delegation_path:
              type: array
              items:
                type: string
            previous_steps:
              type: array
              items:
                type: string
    PolicySet:
      required:
        - policies
      type: object
      properties:
        maxDelegationDepth:
          type: integer
        target:
          type: object
          properties:
            environment:
              type: object
              properties:
                licenses:
                  $ref: '#/components/schemas/licenseRuleList'
        policies:
          type: array
          items:
            $ref: '#/components/schemas/Policy'
    PolicySet_evidence_request:
      required:
        - policies
      type: object
      properties:
        target:
          type: object
          properties:
            environment:
              type: object
              properties:
                licenses:
                  $ref: '#/components/schemas/licenseRuleList'
        policies:
          type: array
          items:
            $ref: '#/components/schemas/Policy_request_evidence'
    Policy:
      required:
        - target
        - rules
      type: object
      properties:
        target:
          required:
            - resource
            - actions
          type: object
          properties:
            resource:
              required:
                - type
                - identifiers
                - attributes
              type: object
              properties:
                type:
                  type: string
                identifiers:
                  type: array
                  items:
                    type: string
                attributes:
                  type: array
                  items:
                    type: string
            actions:
              type: array
              items:
                type: string
            environment:
              type: object
              properties:
                serviceProviders:
                  type: array
                  items:
                    type: string
        rules:
          type: array
          items:
            required:
              - effect
            type: object
            properties:
              effect:
                type: string
    Policy_request_evidence:
      required:
        - target
        - rules
      type: object
      properties:
        target:
          required:
            - resource
            - actions
          type: object
          properties:
            resource:
              required:
                - type
                - identifiers
                - attributes
              type: object
              properties:
                type:
                  type: string
                identifiers:
                  type: array
                  items:
                    type: string
                attributes:
                  type: array
                  items:
                    type: string
            actions:
              type: array
              items:
                type: string
        rules:
          type: array
          items:
            required:
              - effect
            type: object
            properties:
              effect:
                type: string
    jwt_payload_delegation_evidence_token:
      required:
        - delegationEvidence
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-12345678
        jti:
          description: jti value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        delegationEvidence:
          required:
            - notBefore
            - notOnOrAfter
            - policyIssuer
            - target
            - policySets
          type: object
          properties:
            notBefore:
              type: integer
            notOnOrAfter:
              type: integer
            policyIssuer:
              type: string
            target:
              required:
                - accessSubject
              type: object
              properties:
                accessSubject:
                  type: string
            policySets:
              type: array
              items:
                $ref: '#/components/schemas/PolicySet'
    DelegationResponse:
      title: DelegationResponse
      type: object
      properties:
        delegation_token:
          type: string
          format: application/jwt
          example: ".eyJpc3MiOiJkaWQ6aXNoYXJlOkVVLk5MLk5UUk5MLTEwMDAwMDA0Iiwic3ViIjoiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwNCIsImp0aSI6IjdmYTFlYzM5YmFjMzRmZmZhMmNhNDgyMDFlNDhmMDNhIiwiaWF0IjoxNzExNDY2OTg1LCJleHAiOjE3MTE0NjcwMTUsImF1ZCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEiLCJkZWxlZ2F0aW9uRXZpZGVuY2UiOnsibm90QmVmb3JlIjoxNTQxMDU4OTM5LCJub3RPbk9yQWZ0ZXIiOjIxNDc0ODM2NDcsInBvbGljeUlzc3VlciI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDUiLCJ0YXJnZXQiOnsiYWNjZXNzU3ViamVjdCI6ImRpZDppc2hhcmU6RVUuTkwuTlRSTkwtMTAwMDAwMDEifSwicG9saWN5U2V0cyI6W3sibWF4RGVsZWdhdGlvbkRlcHRoIjowLCJ0YXJnZXQiOnsiZW52aXJvbm1lbnQiOnsibGljZW5zZXMiOlsiSVNIQVJFLjAwMDEiXX19LCJwb2xpY2llcyI6W3sidGFyZ2V0Ijp7InJlc291cmNlIjp7InR5cGUiOiJHUzEuQ09OVEFJTkVSIiwiaWRlbnRpZmllcnMiOlsiMTgwNjIxLkFCQzEyMzQiXSwiYXR0cmlidXRlcyI6WyJHUzEuQ09OVEFJTkVSLkFUVFJJQlVURS5FVEEiXX0sImVudmlyb25tZW50Ijp7InNlcnZpY2VQcm92aWRlcnMiOlsiZGlkOmlzaGFyZTpFVS5OTC5OVFJOTC0xMDAwMDAwMyJdfSwiYWN0aW9ucyI6WyJJU0hBUkUuUkVBRCJdfSwicnVsZXMiOlt7ImVmZmVjdCI6IlBlcm1pdCJ9XX1dfV19fQ.dNiITX_uHj3CJagOm54W-_MD2PXIsh1snviAtuoRbc7a7nRkQXZShJJDpldpyQOugsqFFhgLedUXM5z8kST0-5a9BNaaxrW5KAZNqyXtDgudRgB8T2vrohcmgLin39pgvD1gydoHHIXolJxPHCOYdxAamMD-8umvTzCFogjdwFaB9RMVWUHMbDuAZGYup-lSewuIK2pkwKJZft5ZRWxfignBBt2mauB4wot5Z92VLPReNA8EH0R9C_GkykP6pRCu2Km7La3c116WNP0szN02l8P87rqVNwDsjLpzhpH1cs17shDvbis8DbKb3KsHnq_LALAG9nx4GOFrupxuAadhGw"
    openid-authorize:
      required:
        - code
        - state
      properties:
        code:
          type: string
        state:
          type: string
    UserinfoResponse:
      title: UserinfoResponse
      type: object
      properties:
        userinfo_token:
          type: string
          format: application/jwt
    delegationPolicyRequest:
      description: >-
        The model used for requesting delegation policy creation.
      required:
        - notBefore
        - notAfter
        - policyRequestor
        - policyIssuer
        - target
        - policySets
      type: object
      properties:
        notBefore:
          type: integer
        notOnOrAfter:
          type: integer
        policyRequestor:
          type: string
        policyIssuer:
          type: string
        target:
          required:
            - accessSubject
          type: object
          properties:
            accessSubject:
              type: string
        policySets:
          type: array
          items:
            $ref: '#/components/schemas/PolicySet'
    jwtPayloadDelegationPolicyRequestToken:
      title: jwtPayloadDelegationPolicyRequestToken
      required:
        - iss
        - sub
        - aud
        - jti
        - exp
        - iat
        - dataspaces_info
      type: object
      properties:
        iss:
          description: The id of the issuer of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-10000004
        sub:
          description: The id of the subject of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-10000004
        aud:
          description: The id of the audience of this JWT.
          type: string
          example: did:ishare:EU.NL.NTRNL-10000001
        jti:
          description: jti value of JWT.
          type: string
          example: 378a47c4-2822-4ca5-a49a-7e5a1cc7ea59
        exp:
          format: int32
          description: UNIX timestamp in seconds until when this JWT is valid.
          type: integer
          example: 1504684475
        iat:
          format: int32
          description: UNIX timestamp in seconds when this JWT was issued.
          type: integer
          example: 1504683475
        delegationPolicyRequest:
          allOf:
            - $ref: '#/components/schemas/delegationPolicyRequest'
  headers:
    optionsAllowHeader:
      description: List of allowed HTTP methods
      schema:
        type: string
      example: GET, PUT, POST, OPTIONS
  parameters:
    delegation-evidence:
      deprecated: false
      name: delegation_evidence
      description: >-
        iSHARE delegation evidence regarding the requested service. The Service
        Consumer can obtain this evidence from an Authorization Registry /
        Entitled Party before requesting a specific service.
      schema:
        type: string
      in: header
      required: false
    delegation_evidence_header:
      name: delegation_evidence
      description: >-
        iSHARE delegation evidence regarding the requested service. The Service 
        Consumer can obtain this evidence from an Authorization Registry / 
        Entitled Party before requesting a specific service.
      schema:
        type: string
      in: header
    service_consumer_id_token_sc:
      name: service_consumer_assertion
      description: >-
        iSHARE specific optional client assertion. Used when a Service Consumer
        is requesting a service on behalf of another Service Consumer in a 
        'service broker' pattern. It is used to prove that the 'brokering' 
        Service Consumer indeed has had a request from the original Service 
        Consumer
      schema:
        type: string
      in: header
    purpose:
      name: LicensePurpose
      description: >-
        Optional iSHARE specific value describing the purpose of the license the
        Service Consuming Entity requests for the data in the service response
      schema:
        type: string
      in: header
    service_headers:
      name: Service-Headers
      description: Any service specific headers
      schema:
        type: string
      in: header
    content-type_form:
      deprecated: false
      example: x-www-form-urlencoded
      name: Content-Type
      description: >-
        Defines request body content type. MUST be equal to
        application/x-www-form-urlencoded.
      schema:
        type: string
      in: header
      required: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: OAuth 2.0 authorization based on bearer token. MUST contain “Bearer “ + access token value. Must be provided if restricted endpoints are needed.
  responses: {}
security: []